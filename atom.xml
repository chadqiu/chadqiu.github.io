<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chadqiu</title>
  
  
  <link href="http://chadqiu.github.io/atom.xml" rel="self"/>
  
  <link href="http://chadqiu.github.io/"/>
  <updated>2024-11-26T16:52:38.654Z</updated>
  <id>http://chadqiu.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>24-11-24Z哥直播</title>
    <link href="http://chadqiu.github.io/a42e1736d2ee.html"/>
    <id>http://chadqiu.github.io/a42e1736d2ee.html</id>
    <published>2024-11-26T16:50:26.000Z</published>
    <updated>2024-11-26T16:52:38.654Z</updated>
    
    <content type="html"><![CDATA[<p>[2024-11-24 20-01-03][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>根据提供的内容，以下是从直播中提取的与股票相关的干货内容：</p><h3 id="关于“赤猴”的概念："><a href="#关于“赤猴”的概念：" class="headerlink" title="关于“赤猴”的概念："></a>关于“赤猴”的概念：</h3><ul><li><strong>赤猴指的是探子</strong>：主要用于试仓、探测市场信息（如第一次探路）。如果探子带回了重要信息，就可以大胆跟进；如果被逮住，可以视为试错的一部分。</li><li><strong>赤猴的概念误区</strong>：一些人认为连续的损失就是全部“赤猴”的失败，但实际上可能只是其中一小部分“赤候”失联，并不代表全部的损失。</li></ul><h3 id="关于市场情绪和策略："><a href="#关于市场情绪和策略：" class="headerlink" title="关于市场情绪和策略："></a>关于市场情绪和策略：</h3><ul><li><strong>市场总是要洗一次盘</strong>：主播认为必须引导市场进入调整阶段，形成一定程度的信心，这样才能方便机构换手布局。</li><li><strong>调整是为了筹码换手</strong>：市场必须经历调整，之后主力会重新布局筹码。打击市场中的恐慌情绪，让投资者在这种“调整”的形态中逐步加入，最终形成新的走势。</li></ul><h3 id="关于股票操作技巧："><a href="#关于股票操作技巧：" class="headerlink" title="关于股票操作技巧："></a>关于股票操作技巧：</h3><ul><li><strong>不要盲目追涨杀跌</strong>：主播强调不要受到市场情绪的影响，有时避开市场追涨杀跌，等待更好的底部再介入可能会有效。</li><li><strong>试仓方法</strong>：以小仓位开始，如果在试仓过程中发现行情不符合预期，应迅速止损。</li><li><strong>克服心态障碍</strong>：保持心态平和，及时止损，不要臆断市场唯一正确的方向，要学会分析和接受市场变化。</li></ul><h3 id="关于具体股票操作案例："><a href="#关于具体股票操作案例：" class="headerlink" title="关于具体股票操作案例："></a>关于具体股票操作案例：</h3><ul><li><strong>新前锋的仓位管理</strong>：主播示例说小范围持股，如果有操作机会则及时调整仓位，保持警惕以应对市场变化。</li><li><strong>量能和价格关系</strong>：股价的量价关系是判断买卖时机的重要指标。如果发现某只股票量价共振，低点区域或有大幅值，可以为左侧操作提供依据。</li></ul><h3 id="明确心态："><a href="#明确心态：" class="headerlink" title="明确心态："></a>明确心态：</h3><ul><li>监盘和操作时，应该保持一颗平常心，关注量能变化和市场情绪，而非一时的涨跌。</li></ul><h3 id="关于个人情感生活建议："><a href="#关于个人情感生活建议：" class="headerlink" title="关于个人情感生活建议："></a>关于个人情感生活建议：</h3><ul><li><strong>射手男追水瓶女的攻略</strong>：情感和股票都一样，需要理解对方的个性，投其所好，保持耐心，投资也应如此。</li><li><strong>整体情绪掌控</strong>：保持乐观的心态，对待感情和炒股一样，不应过于悲观或急躁，恰当的乐观有助于做出正确的决定。</li></ul><p>这些内容强调了对市场和技术面的重视，同时也建议了理性投资的心态。希望对你有所帮助。</p><p>这段内容是直播中的一段总结与讨论，主播回顾了近期的直播内容，并解答了观众的问题。直播内容涉及以下几个主要方面：</p><ol><li><p><strong>设备与直播问题</strong>：主播提到小米系统升级到2.0后，b站直播机没有更新，导致直播机横屏时经常闪退。主播打算下周解决这个问题，并考虑使用苹果设备作为替代方案。</p></li><li><p><strong>对“赤猴”的定义</strong>：主播解释“赤猴”是历史上的探子或侦察兵，并澄清了相关误解。</p></li><li><p><strong>收看方式及操作细节</strong>：主播建议大家根据屏幕方向选择合适的观看模式，并解释了一些操作细节，如弹幕使用和手势切换。</p></li><li><p><strong>股票市场分析</strong>：主播讨论了近期股票市场的波动情况，包括“赤猴”策略应用、期货市藁仓位管理等专业术语。</p></li><li><p><strong>个人事件与互动</strong>：主播还提到了与粉丝互动的个人事件，包括接收到的礼物、收到的朋友请求、以及粉丝的留言和建议。</p></li><li><p><strong>心态与原则</strong>：主播强调心态的重要性，认为“试仓”是关键，以及市场必须通过多空博弈、投机与止损来实现合理的调整。</p></li><li><p><strong>具体操作与建议</strong>：主播给出了关于股票持仓和处理策略的具体建议，包括如何判断市场趋势、何时止损等。</p></li></ol><p>总结来说，这段内容涵盖了直播中的技术配置、市场分析、粉丝互动和个人感悟等多个方面，体现了主播作为财务博主的专业性和个人风格。</p><p>[2024-11-24 21-01-14][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>根据您提供的金融主播的内容，提取了以下与股票相关的干货内容：</p><ol><li><p><strong>运营策略</strong>：</p><ul><li>选择自己看懂的票，拿得不动。</li></ul></li><li><p><strong>市场观点</strong>：</p><ul><li>选择看涨的市场状态下持有的股票（如整体月线走势向上）可以获得较好的收益。</li><li>大盘转向时表现不佳，因此操作方面看到市场发生变化需及时调整状态。</li></ul></li><li><p><strong>投资建议</strong>：</p><ul><li>换和其他人多交流，提供给朋友提供少量的价值，希望大家少亏钱甚至不亏钱。</li><li>提前交代的操作策略是拿着一个“太子”进行长期持有，即认为可以穿越整个牛市。</li></ul></li><li><p><strong>风险提示</strong>：</p><ul><li>当市场风格变化时波动大，不必过于恐慌，但应引起重视。</li><li>不进行频繁操作：强调了即便再操作，也应看清楚市场走势，只有大盘向上才不亏。</li></ul></li><li><p><strong>解释原因</strong>：</p><ul><li>选择的股票要看懂基本面，分析他们历史走势和量化模型进行配比。</li></ul></li><li><p><strong>实例说明</strong>：</p><ul><li>一些朋友（如峰哥）因为持有稳健医疗而被套牢。</li><li>强调即使有较好的操作，但如果市场趋势下行，投资将受到大的影响。</li><li>提供具体投资行为建议（如在屏幕上划动进行操作）以防操作失误。</li></ul></li></ol><p>总结了一段主播的核心经验和教训：坚持长期持有自己熟悉的股票，不频繁操作，并分析市场趋势，避免因市场波动过大出现较大风险。</p><p>这段内容是一位直播主在阐述关于投资市场和个人投资策略的看法。总结如下：</p><ol><li><p><strong>市场波动</strong>：主播提到市场表现不稳定，自己也在考虑切换到苹果股价作为投资标的。但更关心的是分享自己的投资理念。</p></li><li><p><strong>投资策略</strong>：主播重视长期投资，强调选择自己能理解并看得到的股票，保持满仓操作，减少频繁操作带来的风险。</p></li><li><p><strong>市场风格的变化</strong>：主播表示会面对市场风格的变化，市场下跌时可以认命，但上涨时则期待市场持续上升走势。</p></li><li><p><strong>操作建议</strong>：主播建议投资者在市场看涨时继续持有，但下跌时减少操作，避免追高被套。同时也提醒频繁操作可能带来风险。</p></li><li><p><strong>预防措施</strong>：主播强调要树立正确的投资观念，避免频繁操作，通过选择易于理解的股票或处于相对安全的“潜水区”来减少风险。</p></li><li><p><strong>个性与强制执行</strong>：主播提到一些投资者虽然知道应该操作少一些，但他们依然会频繁操作，这种行为带来的问题在于可能会失去耐心和理性。</p></li><li><p><strong>沟通反馈</strong>：主播吐槽一些投资者不听从建议，比如继续高位买入造成亏损。他建议投资者认真考虑是否适合进行市场操作，而非频繁行动或盲目追高。</p></li><li><p><strong>互动方面</strong>：直播过程中，主播与观众进行了一些互动，并有所抱怨观众的操作习惯。</p></li></ol><p>总体来看，主播试图用通俗的语言和实际例子来分享自己的投资观点和策略，同时也强调自己的投资理念和观众的操作习惯之间的矛盾。</p><p>[2024-11-24 21-18-12][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>从这段直播内容来看，提取到的股票相关的信息较少，主要是主播的一些技术操作问题和画面调试的讨论。但是，如果要提取与股票或投资决策有关的内容，可以关注主播在谈话中提到的投资决策建议或者市场分析。以下是从该段内容中提取的与投资决策相关的信息较为有限的几点：</p><ol><li><strong>技术操作调整</strong>：主播提到尝试了更换不同的手机品牌（小米和华为），并考虑使用电台模式来改善直播画面。但并未直接提及具体的投资决策建议。</li><li><strong>市场情感因素</strong>：主播多次提到对设备画面的观感偏差，似乎表明对市场或投资环境的看法受到情感因素的影响，但这种主观感受并未转化为具体的投资决策建议。</li><li><strong>市场热门话题</strong>：主播提到了一些热门的股票代码或者投资方向（如game sty k西北k cc北三七），可能间接涉及投资决策，但并未具体说明这些股票或投资方向的优劣。</li></ol><p>从这段直播内容中，暂未发现直接针对具体某只股票的投资建议。如果需要获取更精确的投资建议，建议关注专业投资分析或使用专业的股票研究工具。</p><p>这段内容描述了一位用户在观看直播时遇到的画面问题及其调整尝试过程。用户觉得画面特别红、刺眼，而且之前的直播画面大且近。为了调整这些设置，尝试了以下几项操作：</p><ol><li>重启手机（小米），以改善画质。</li><li>考虑调整为电台模式。</li><li>换用华为设备进行直播。</li><li>进行磨皮设置的恢复以改善画面质量。</li></ol><p>但即便如此，用户仍然对画面效果不满，尤其是红色调的问题持续存在，导致整个五官模糊。最终，用户表示该直播效果难以接受，表现出一种困扰和不满意的语气。</p><p>[2024-11-24 21-26-35][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>从您提供的直播内容中，提取出的与股票和股票相关的信息如下：</p><ol><li><p><strong>股票操作建议</strong>：主播建议“别操作了啊，就拿住不动就完了”，并提到因为频繁操作导致损失了二十分钟。</p></li><li><p><strong>话筒插个电会卡</strong>：主播提到“我怕它卡。对，就这样了不不，咱们不再折腾了啊”，这句话可能涉及某个通讯设备或软件在接电后容易出现卡顿的情况。</p></li><li><p><strong>股票推荐</strong>：主播推荐“还得是小米儿，真的还得是小米华为”，表明在他的直播间，小米和华为股票是被推荐的股票。</p></li></ol><p>虽然直播内容中提到了一些与华为相关的评论，但没有明确指出是股票投资的具体建议。从主播的表述来看，更多是在推广自己认为好的品牌，而非具体股票买卖建议。</p><p>希望上述信息能够帮助您节省时间并获取所需信息。如果您有其他具体需求，请随时告知。</p><p>总结如下：</p><p>对话内容主要围绕以下几个方面展开：</p><ol><li><strong>停止操作</strong>：对话开头提到不再进行任何操作，已经浪费了二十分钟。</li><li><strong>讨论手机</strong>：提到小米和华为，表示无线设备的充电和操作问题。</li><li><strong>电池电量担忧</strong>：目前电量只有一小部分（百分之二十八），担心使用华为设备充电时可能会导致过热和卡顿问题。</li><li><strong>情感表达</strong>：表示非常喜欢某些产品和技术，尤其是来自中国的品牌（例如小米和华为），表达了对中国品牌的支持和热爱。</li><li><strong>澄清立场</strong>：强调自己并没有对华为有任何不满，只是担心电量问题。</li><li><strong>未完成的事情</strong>：提到准备开始做一些事情，但又担心迟到问题。</li></ol><p>整体来看，这段对话中含有一些矛盾和不确定的表达，可能是因为对话中的某些情绪波动所致。</p><p>[2024-11-24 21-32-03][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>根据提供的内容，以下是提取出的与股票相关的关键干货信息：</p><ol><li><p><strong>净值曲线与心态</strong>：</p><ul><li>如果你能保持净值曲线平稳，且在市场波动时选择拿住不动，你很可能具备一些投资天赋。</li><li>保持心态平和是长期投资的重要原则。如果你在市场波动时无法冷静对待，可能会亏钱。</li></ul></li><li><p><strong>风险管理</strong>：</p><ul><li>对于亏损30%以上的投资者，建议止损，不要继续持有。这些投资已经亏损过多，进一步操作可能带来更多损失。</li><li>对于亏损10%到20%左右的投资者，虽然市场波动较大，但也不需要过度交易，继续观望一段时间可能更为明智。</li><li>对于未亏未赚的投资者，保持不变的操作策略，观察市场波动，以确保账户盈利。</li></ul></li><li><p><strong>市场预测与交易策略</strong>：</p><ul><li>市场无法精确预测，但当你已经买入股票时，如果市场没有证明你是对的，那么你就是错的。</li><li>追涨杀跌在任何市场阶段都不是有益的策略，保持冷静，不追加亏损的投资。</li></ul></li><li><p><strong>交易纪律</strong>：</p><ul><li>不要预期未来市场的走势，应更加关注账户变化，确保不会让盈亏反转。</li><li>确保盈亏控制在合理范围内，及时退出不符合预期的操作。</li><li>如果能够在未来两天内全身而退，保持账户盈利，这就是正确的交易策略。</li></ul></li><li><p><strong>心态调整</strong>：</p><ul><li>增强对市场波动的心理承受能力。</li><li>不要因担心出现尚未预料的市场情况而犹豫不决或做出错误决策。</li></ul></li><li><p><strong>具体操作建议</strong>：</p><ul><li>目前市场上有普遍浮盈的股票保持不动即可。</li><li>对于有浮亏的投资者，应设定止损点，提前退出避免进一步亏损。</li><li>不要去天真的寻找极端波动下对利润的贪婪，避免大失误。</li></ul></li></ol><p>这些干货信息强调了心态、风险控制和交易纪律的重要性，特别是对市场的理性预测分析。</p><p>这段内容是一段直播节目的总结，主播在直播中讨论了财务和投资的主题，并分享了一些关于市场的见解和建议。以下是主要内容的总结：</p><ol><li><p><strong>直播氛围与互动</strong>：</p><ul><li>主播提到今天的直播是第三场。</li><li>他随机点名一些观众送出霸王茶几等奖品，包括来自不同城市的参与者。</li><li>主播对一些观众的操作给予具体指导，并对一些由于操作不当而获利受损的观众进行了劝诫。</li></ul></li><li><p><strong>市场看法与策略</strong>：</p><ul><li>主播认为每个人都有自己的投资策略和适合的投资组合。</li><li>他强调对于浮盈的人来说，应该保持冷静，不要急于追涨杀跌，否则可能造成亏损。</li><li>主播提醒投资者要小心那些承诺有较高收益的投资机会，因为这可能是不切实际的幻想。</li><li>他建议投资者首先要确保自己的账户在交易中不亏损，然后在市场反弹时再考虑操作策略。</li><li>对于当前浮盈或者账面亏损的投资者，主播分别给出了不同的建议，既有保留不动的建议也有建议止损离场的建议。</li></ul></li><li><p><strong>直播参与与互动</strong>：</p><ul><li>主播经常通过公众发言来引导观众发言，提升观众的参与度。</li><li>他还收到了一些观众的处境反馈和详细操作建议，主播给予了反馈和支持。</li><li>整个直播中也穿插了一些对评论区弹幕互动和具体观众行为的调侃和解释。</li></ul></li><li><p><strong>主题延伸</strong>：</p><ul><li>在直播过程中，主播还提到了一些市场操作的概念，如净值曲线、止损点、浮盈与浮亏的控制等。</li><li>他提到了一些市场观点，如有些人可能会因为市场的大波动而被套牢，或者在市场回调时需小心操作风险。</li></ul></li></ol><p>总结而言，这段直播充满了互动和实际操作的建议，主播不仅分享了自己的经验，还给予观众具体的指导和鼓励。</p><p>[2024-11-24 22-32-16][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>下面是从提供的金融主播直播内容中提取的股票相关干货内容：</p><ol><li><p><strong>停止加杠杆炒股</strong></p><ul><li>主播多次强调不要使用杠杆炒股，不要借钱或利用融资融券炒股。(多次提及)</li></ul></li><li><p><strong>适时止盈</strong></p><ul><li>主播指出，对于浮动盈利较大的投资者，不应等到满仓后再卖出，而应当适时止盈以避免市场突然下跌带来的损失。(多次提及)</li></ul></li><li><p><strong>交易纪律的重要性</strong></p><ul><li>主播强调，对所有投资者最重要的是遵守交易纪律，尤其是对于浮动盈保持较合理仓位进行操作。(多次提及)</li></ul></li><li><p><strong>市场资金进退策略</strong></p><ul><li>主播描述了市场的资金流动规律，指出在市场上涨阶段新的入场资金是市场的一部分，而在市场见顶后，新的资金应逐步出货。(提到四个市场阶段)</li></ul></li><li><p><strong>低波红利策略</strong></p><ul><li>介绍了一种低波红利策略，这种策略是通过选择稳定表现的股票，实现长期稳定获利。(多次提及)</li></ul></li><li><p><strong>止损规则</strong></p><ul><li>提供了具体的止损规则，例如设立基于K线止损的具体位置和操作步骤。(多次提及)</li></ul></li><li><p><strong>市场不确定性与风险管理</strong></p><ul><li>强调要在了解市场不确定性的情况下，正确评估仓位风险，及时进行风险控制，避免本金大量损失。(多次提及)</li></ul></li><li><p><strong>个人投资建议</strong></p><ul><li>建议投资者们在不确定时避免过于激进的操作，比如不要对市场行情产生过多情感依赖。</li></ul></li></ol><p>综上所述，注重保持股票投资的纪律性、掌握时机进行止盈，并建立正确的风险控制意识是关键。</p><p>这段内容是一段直播记录或访谈记录，主要讨论了以下几个方面：</p><ol><li><p><strong>市场波动与个人损失</strong>：记录中提及有人在市场波动中追随情绪进行交易，并选择性上杠杆做高风险操作，最终损失惨重。直播者认为这种行为是不理智且有害的，并表达了对此事的愤怒和失望。</p></li><li><p><strong>理性交易的重要性</strong>：直播者反复强调多次的教训，坚持不要上杠杆、不要借贷炒股的重要性，认为理性的交易纪律能够帮助人们避免不必要的损失，尤其是在市场波动时。</p></li><li><p><strong>市场周期与操作策略</strong>：直播者分析了当前市场阶段的特点，以及第二阶段的可能时机。预测市场会经历起伏，且各部门的不同表现将影响整体走势，呼吁观众在市场不同阶段执行不同的操作策略。</p></li><li><p><strong>个人经历与案例分享</strong>：记录中提及虽然有成功的案例，但部分人因抄底错时、追高失误等原因导致较大损失，讨论如何通过技术手段选择低风险高收益的产品或策略，如低波红利、保命策略等。</p></li><li><p><strong>情感与观点表达</strong>：直播者认为与其抱怨市场不可控，不如理解和实用地运用交易策略，但同时也不必太过于苛责自己。表达了希望观众能够理性对待市场波动，依据具体情况进行操作。</p></li></ol><p>总结起来，这段内容主要围绕市场运作及其个人交易实践展开，强调理性交易、风险控制和个人能力提升的重要性。</p><p>[2024-11-24 23-32-16][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>从你的金融主播直播内容中，提取出的股票相关干货内容如下：</p><ol><li><p><strong>找低位点操作</strong>：“您是创出新高以后往下杀第一波了，你把往下杀到那第一波那个低点，记住那个地点了吗？起来您可能是在这儿追的对吧？没关系，现在是不是回到这儿了，一个地点，您给连个线，连个线啊损也好，还是什么无辜了。”</p></li><li><p><strong>投资心理提示</strong>：“赚的就是你的钱赚的就是。”</p></li><li><p><strong>长期投资观点</strong>：“因为我每次都认为其实你要还长，还长城题材贼多呢，还还还抱有幻想。”</p></li><li><p><strong>不回答某些问题</strong>：“哥们儿，就是你们玩幺五玩游玩游资票的被套了的，我一律不回答，你们也不要发弹幕了。”</p></li><li><p><strong>三不原则+四不原则</strong>：“咱们无论老朋友啊还是什么，把三不原则再打出来，再加上四步，对不对？后来又加了一步，把四不原则打出来等着你。有人说说摸腰骨反弹口，这是咱家的四部原则。”</p></li></ol><p>这段内容主要是一位投资者分享关于股票交易的心得和建议。具体总结如下：</p><ol><li><strong>投资者提问</strong>：投资者遇到问题，寻求解决方法。</li><li><strong>市场分析</strong>：讨论了不同的市场阶段和相应的操作策略。</li><li><strong>情绪与策略</strong>：强调投资者在市场波动中的情绪管理，建议不要激动，保持冷静。</li><li><strong>市场提醒</strong>：提醒投资者近期需要遵循三不原则加上新的四不原则，并分享了自己的投资策略，即所谓的“四步原则”。</li><li><strong>积极态度</strong>：鼓励投资者记住这一经验，并保持冷静应对市场变化。</li></ol><p>从整体来看，这段话主要集中在股票交易过程中的心理调适和应对策略，旨在帮助投资者更好地把握市场动态和情绪管理。</p><p>[2024-11-24 23-38-19][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>以下是直播中关于股票的干货内容总结：</p><ol><li><p><strong>国足概念评价</strong>：</p><ul><li>国足不是妖股，稳定如中国远洋、中国石油，每场比赛都能带来稳定的收益率。</li><li>总结个人对国足的支持态度，强调国足是国家自己的球队，应支持。</li></ul></li><li><p><strong>股票仓位管理与调整</strong>：</p><ul><li>现阶段仓位管理的重要性，包括何时买入、何时调整仓位。</li><li>股票下跌的特定条件下可调整仓位：如果股价回撤幅度不超过10%，则继续持有。</li></ul></li><li><p><strong>止损策略</strong>：</p><ul><li>提醒新手投资者要止损，控制风险，不要盲目追涨。</li></ul></li><li><p><strong>领涨股分析</strong>：</p><ul><li>提到目前市场缺乏明显的领涨股，“龙头”至今未出现，因此需要耐心等待。</li></ul></li><li><p><strong>市场发展趋势</strong>：</p><ul><li>提示第二阶段的备战步骤，包括持仓整理、等待增量资金入场、调整仓位。</li></ul></li><li><p><strong>具体操作建议</strong>：</p><ul><li>适时调整仓位，利用诱空或诱多的k线图形进行交易。</li><li>保持小仓位，如10%-30%的仓位动态调整。</li></ul></li><li><p><strong>风险管理</strong>：</p><ul><li>重新调整仓位时，注意个股的基本面和宏观经济环境的变化。</li><li>长期稳定与短期波动之间的平衡，如保持持仓不动以保护前期盈利。</li></ul></li><li><p><strong>老朋友与新手仓位管理建议</strong>：</p><ul><li>对于有明显被套且未结账的投资者，建议调整仓位或采用小仓位试探性操作。</li></ul></li><li><p><strong>历史与经验教训</strong>：</p><ul><li>过去十几年对股市投资的历史总结，强调市场波动中的风险管理。</li><li>强调耐心等待和长期投资策略的重要性。</li></ul></li><li><p><strong>心态与专业心态</strong>：</p><ul><li>建议投资者保持专业且冷静的心态，避免情绪化操作。</li></ul></li></ol><p>总结：</p><ul><li>当前市场缺乏明显趋势，需要耐心等待并调整仓位。</li><li>注意控制仓位，操作上应基于对个股基本面及宏观经济环境的分析。</li><li>买卖操作需结合市场大势进行，坚持长期投资策略，避免频繁操作带来的风险。</li></ul><p>这段内容涉及股票交易和个人投资建议，概括如下：</p><ol><li><p><strong>个人投资态度</strong>：作者强调了对国足的支持，但主张以冷静、客观的态度看待投资国足股票（疑似谐音梗）的态度。同时，作者表达了对自身持仓股票的信心和对市场未来趋势的判断。</p></li><li><p><strong>市场分析与操作建议</strong>：作者提供了几个步骤来备战第二阶段的市场变化：</p><ul><li><strong>处理当前仓位</strong>：清理无用仓位，保持仓位清晰。</li><li><strong>等待增量资金</strong>：等待市场出现新的增量资金。</li><li><strong>及时调整仓位</strong>：在找到合适的时机重新调整仓位。</li></ul></li><li><p><strong>止损与调整仓位</strong>：作者强调必须根据实际市场表现和标的特性及时止损，而不是盲目持有；同时应当适量关注新机会。</p></li><li><p><strong>心态管理</strong>：作者认为心态对于投资决策非常重要，分享一些交易心理练习的方法，比如记录每次交易错误、减少冲动操作等。</p></li><li><p><strong>实例说明</strong>：用具体实例说明一些投资策略，比如仓位管理、止损策略、市场预期等。</p></li><li><p><strong>市场前景讨论</strong>：讨论了中国股市与其他国家市场的估值对比，认为中国股市的整体估值相对较低，并提出了对近期股市走势的一些看法。</p></li></ol><p>综上所述,这段文字充满了投资策略和观点分享,作者希望听众能够冷静、理性地面对市场,并根据自身情况灵活调整投资策略。</p><p>[2024-11-25 00-38-31][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>根据您的需求，以下是提取出的关于股票投资和操作的干货内容：</p><ol><li><p><strong>投资心态和经验分享</strong>：</p><ul><li>保持耐心，不要急功近利。并非所有的股票波段都会有第二个波段，很多“妖股”都是在一个阶段的行情之后才能显现。</li><li>从长期来看，股票市场七成都是男性的投资者这一说法并不准确，更多是个人习惯和兴趣导致。</li></ul></li><li><p><strong>炒股技巧</strong>：</p><ul><li>提议采用“亚马尔”策略进行操作。在关键位置及时跟进买入，并在适当的时候减仓到三分之二仓位，以减小风险。</li><li>了解透明的市场走势是基于模型计算，需要不断回测和调整策略。</li><li>不建议频繁操作。类似有经验的投资者会在判断后一次性加仓或者平仓，不轻易跟随热门股。</li></ul></li><li><p><strong>市场观察和操作贴士</strong>：</p><ul><li>市场有增量资金，前期获利盘的洗出会产生一定波动。把握好这种机会，而不是试图提前抢跑。</li><li>如果前期操作策略失误，下次操作应该遵循纪律，即使结果是错的，也是正确的操作。</li><li>利用技术分析工具，如MACD等，可以辅助判断投资时机。具体操作时需要注意技术指标的选择和运用。</li></ul></li><li><p><strong>心理与风险控制</strong>：</p><ul><li>批评了单纯追求高涨幅的心态，强调应保持风险意识，不进行纯粹博弈。</li><li>经验教训强调了止损的重要性，具体操作中多次提到不追高，控制仓位的操作策略。</li><li>对于新手投资者来说，先从小额模拟盘入手，了解资金流动和资产操作的基本逻辑更为重要。</li></ul></li><li><p><strong>个人投资风格与抉择</strong>：</p><ul><li>选择股票并非只需要靠消息和市场共识，更重要的是个人的研究和判断。</li><li>投资过程中，要学会平衡操作中的贪婪与恐惧心态，找到适合自己的安全垫区间。</li></ul></li></ol><p>这些建议帮助理解了主播围绕股票市场的一些基本策略和实际操作，希望对您有所帮助。</p><p>总结：</p><p>该直播内容主要围绕股票投资策略、个人经历及粉丝互动展开，强调了市场中的机遇与个人抉择的重要性。主要内容包括：</p><ol><li><p><strong>投资策略</strong>：强调“亚马尔策略”，即在股票的初始上涨阶段低买高卖，实现收益最大化。同时，分享了如何通过模拟盘和实盘的区别来更好地理解投资。</p></li><li><p><strong>市场洞察</strong>：提到市场中脉络的重要性，以及新手投资者可能错过的机会，强调实战经验的重要性。</p></li><li><p><strong>市场环境分析</strong>：分析了市场当前的状态，提到外围资金对市场的影响，并指出外资入场带来的积极效应。</p></li><li><p><strong>粉丝互动</strong>：直播中多次提及粉丝的问候与反馈，表达了对粉丝的支持与理解，同时也分享了一些投资建议。</p></li><li><p><strong>个人认知与性格影响</strong>：提到不同星座在投资决策中的影响，强调个性特征对于投资策略选择的影响。</p></li></ol><p>整体而言，该直播内容充满了个人见解和实战经验分享，旨在帮助投资者更好地理解和应对市场的变化。</p><p>[2024-11-25 01-38-31][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>以下是提取出的与股票相关的干货内容：</p><ol><li><p><strong>股票投资</strong>:</p><ul><li><strong>基金经理趋势分析</strong>: 价格最大的反弹是在底部月线突然释放出巨量，说明上涨动力很大。</li><li><strong>组合投资的多样化</strong>:<ul><li>当某一只股票表现优秀，导致整个组合波动过大时，应考虑减仓以保持组合的稳定。</li><li>应该保持个股仓位在总体投资组合中的上限比例，避免单一股票占比过高影响整体波动。</li></ul></li></ul></li><li><p><strong>交易策略</strong>:</p><ul><li><strong>仓位管理</strong>:<ul><li>一旦收益到你认为安全或不能接受的亏损时，应该立即出场。</li><li>长期持仓时，如预期市场走出B1模式，不应轻易做空，尤其是在左侧交易时更应小心。</li><li>在左侧交易中，不应仅因为成本为负就立即操作，需关注市场信号，避免过早操作。</li></ul></li></ul></li><li><p><strong>市场时机</strong>:</p><ul><li><strong>期货与期权挂钩</strong>:<ul><li>买入暂时逆势上涨，而整体市场处于弱势时，可以考虑期货和期权的互动关系。</li><li>注意市场长期趋势，例如人民币汇率预测，在特朗普上台前，人民币可能不一定升值，长线来看，可能保持在一个波动区间内。</li></ul></li><li><strong>行业与个股选择</strong>:<ul><li>几个特定行业如房地产和银行股应慎重考虑市场环境的影响。</li><li>成都等地的房地产市场较为稳健，考虑到土地成本等因素，选择区域内的购房策略。</li></ul></li><li><strong>技术分析</strong>:<ul><li>关注换手率和成交量，可以透过趋势分析判断市场动向，如连续大成交量一般表示市场有较大波动在酝酿。</li></ul></li><li><strong>量化策略</strong>:<ul><li>当市场进入稳定区间时，可以根据量化模型做出适当调整，如金价走势可能随美国政策波动加大，可预料会在区间内震荡。</li></ul></li></ul></li><li><p><strong>股票投资心理</strong>:</p><ul><li>保持理性和耐心，不要试图预判大盘走势，而是遵从市场变化的操作准则。</li><li>投资者应当依据自身风险承受能力和投资经验，选择适合的财报分析和投资模式。</li></ul></li><li><p><strong>投资建议</strong>:</p><ul><li>建议关注个人的长期需求和市场实际情况进行投资。</li><li>私域好友可以通过合理私募理财策略，提升关注者的风险感知及动作执行能力，通过与高质量网红或机构合作，挖掘更多潜在客户。</li><li>注意投资者动向，把握政策导向及市场预期，适当调整操作计划，实现稳健增值。</li></ul></li></ol><p>这段内容涉及多个方面的问题，主要总结如下：</p><ol><li><p><strong>生日祝福与星座配对</strong>：</p><ul><li>卡小呆z哥帅，今天过生日，有求生日祝福。</li><li>射手男和处女座的女人通常不合适，射手男倾向于直男大咧，而处女座注重细节。相比起来，射手男和狮子女比较合适。</li></ul></li><li><p><strong>星座相配讲解</strong>：</p><ul><li>天蝎座天生适合射手座。</li><li>处女座和射手男之间不冲突，但处女座注重细节，射手男可能不太细致。</li></ul></li><li><p><strong>投资建议</strong>：</p><ul><li>建议卖出密云的房产，并在顺义买新盘。</li><li>关于工作地点选择，建议不要在上海郊区买住宅，而是可以考虑苏州、深圳、成都是更好的选择。</li></ul></li><li><p><strong>情感情感建议</strong>：</p><ul><li>处女男和摩羯女相处建议是保持稳定，互相支持。</li><li>处女男难以搞定射手女，建议直接表白，不磨叽。</li></ul></li><li><p><strong>职业建议</strong>：</p><ul><li>想入行明星造型师，建议先通过美发店的培训做起，逐步积累经验。</li></ul></li><li><p><strong>购房建议</strong>：</p><ul><li>寄托率高的东三环老破小更看重租金，而不是自身价值。</li></ul></li><li><p><strong>教学与分享</strong>：</p><ul><li>创业和工作选择，保持理性，不要焦虑或行动过早。</li><li>推荐学习各种市场策略和心态调整，如写周记来保持专注。</li></ul></li></ol><p>总结来说，这段内容涵盖了的感情、星座配对、个人职业发展、购房建议等方面的问题，提供了相应的个性化指导。</p><p>[2024-11-25 02-38-31][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>以下是提取出的股票相关干货内容：</p><ol><li><p><strong>券商板块：</strong></p><ul><li>券商整体问题不大，因为它是业绩最确定的板块。</li><li>创业板指数太多，调整就属于正常现象，无需过度紧张。</li><li>认为现在并不是券商短期能够指望利润增长的时候。</li></ul></li><li><p><strong>投资建议：</strong></p><ul><li>提醒直播间里的粉丝，经济均衡发展是一个长期过程，不要对楼市抱有过高期望，可能长期仍处于震荡调整中。</li><li>建议投资者持续关注市场，不要轻易放弃，尤其是当前经济形势不确定的情况下。</li><li>短线操作需注意中长线止损，避免频繁操作导致资金受损。</li></ul></li><li><p><strong>具体购房建议：</strong></p><ul><li>告诫粉丝，哈尔滨及东北地区房产虽然价格稳定，但流动性较低，建议随时考虑入手而非盲目等待过高涨幅。</li><li>提及大学生恋爱中的实际问题，给出了具体的建议，例如通过送礼和创setup增强好感。</li></ul></li><li><p><strong>关于投资心理状态的指导：</strong></p><ul><li>坚持为好，尤其是在市场调整期要与企业共命运，长期持仓理解企业前进方向。</li><li>避免他人负面言论影响自己的投资信心，保持正能量，继续学习和关注市场。</li></ul></li></ol><p>总结来说，主播通过直播提示了一些投资上的重要信息，并为听众提供了实际操作方面的建议。</p><p>这段内容是一串互联网直播平台的聊天记录，涉及多个梗、星座、 astrology 相关的话题以及一些小段子和建议。主要内容包括但不限于以下几点：</p><ol><li>讨论不同星座组合的配对建议，强调某些星座的特点及需要注意的地方。</li><li>关注某位名为“冷月妹妹”的网友，讨论其是否为真粉丝。</li><li>对粉丝提问进行回答，包括恋爱建议、星座配对和股票投资等方面的建议。</li><li>提醒一些操作注意事项，如不要沉迷假新闻、避免虚假宣传等。</li><li>在聊天过程中，参与者展示了对星座、股票等话题的兴趣，并分享了一些个人经验，如股票交易、相亲技巧等。</li></ol><p>整段聊天记录充满幽默且感性，体现了社交媒体中的日常互动和娱乐性。</p><p>[2024-11-25 03-38-31][zettaranc][如何备战第二阶段（11.24晚8开）].aac</p><p>以下是提取出的股票相关干货内容：</p><ol><li><p><strong>止盈操作</strong>：</p><ul><li>“对，没错，该止盈了啊，不看了，不再check了。”</li><li>“该止盈，今天就不再验证，了结结束这一趴结束啊。”</li></ul></li><li><p><strong>市场分析</strong>：</p><ul><li>“自己把自己化身成成这个女性，已经有人在对岛拉升，除非是行情的后期了，对吧？有点力不从心了，所以行，见好就收出货啊。”</li></ul></li><li><p><strong>投资建议</strong>：</p><ul><li>“一个三四线城市，五六线城市的小牌子，我们要按照LV的这种方式做代扣。你给我做一个，哎，不不来活了吗？做一个小红车，一圈呢，俩三四就都来了。”</li><li>“李小葵妹妹，不是拿大号发的，你们别再发了，小心被人割韭菜。”</li></ul></li><li><p><strong>股票走势分析</strong>：</p><ul><li>“因为为什么你没发现，现在有点强弩之末了吗？发现了吗？就是已经没有没有那种酷哭，当时往上这种那种势能了，到最后已经有两个有两个已经开始这个在对岛拉升了。”</li></ul></li><li><p><strong>经济环境与消费</strong>：</p><ul><li>“到后面再等了一些好的标的就行了，它如果大跌一次，它离不开主线。不要判断底部在哪，你判断不了啊。”</li></ul></li><li><p><strong>市场策略</strong>：</p><ul><li>“你们要注意自己每一个交易的进步点的位置。就是说你现在已经学会在b一买了，哎，就说明你已经不再追高了，这已经是一个巨大的进步了。”</li><li>“你有看到突破库，噗往上走，现在做不了四点了，睡不着啊，这个还在。”</li></ul></li></ol><p>这些信息浓缩了股票投资和市场策略的相关内容，希望对你有所帮助。</p><p>这段文字内容复杂，涉及多人的互动和一些网络社群的独特交流方式。以下是对主要内容的总结：</p><ol><li><p><strong>女粉验真与互动</strong>：</p><ul><li>参与者讨论了各自女粉的身份验证，包括删除和重新发送照片，确保观众只有真实女粉。</li><li>一些女粉的身份被官方认定，比如“种子妹妹”、“藤椒妹妹”等，并有现场展示。</li></ul></li><li><p><strong>直播间的互动与交流</strong>：</p><ul><li>参与者分享了自己对女粉的看法和交流，比如双子女特质的讨论。</li><li>提到一些男粉也参与，通过ID或备注方式确认女粉身份。</li></ul></li><li><p><strong>市场和投资话题</strong>：</p><ul><li>有部分参与者谈论市场环境，投资策略，比如短期市场恐慌、追高后的止损策略。</li><li>建议通过积累经验分享和逐步积累粉丝，进入小红书等平台宣传活动经验。</li></ul></li><li><p><strong>其他信息</strong>：</p><ul><li>再次强调了直播间的女粉构成，提到绝大多数是女粉，男粉在少数。</li><li>讨论了阶段性的营销策略，比如通过订阅或参与活动吸引潜在客户。</li></ul></li><li><p><strong>深夜讨论和休息提醒</strong>：</p><ul><li>虽然讨论持续了一天，最终提醒大家注意休息，关注肌肤保养和护肤，合理安排时间和休息。</li></ul></li></ol><p>整个内容充满了网络社群特有的幽默、互动和营销策略，同时也探讨了现实生活中的一些现象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[2024-11-24 20-01-03][zettaranc][如何备战第二阶段（11.24晚8开）].aac&lt;/p&gt;
&lt;p&gt;根据提供的内容，以下是从直播中提取的与股票相关的干货内容：&lt;/p&gt;
&lt;h3 id=&quot;关于“赤猴”的概念：&quot;&gt;&lt;a href=&quot;#关于“赤猴”的概念</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何使用huggingface的trainer训练模型？</title>
    <link href="http://chadqiu.github.io/fcb5896c5f58.html"/>
    <id>http://chadqiu.github.io/fcb5896c5f58.html</id>
    <published>2023-02-03T13:34:25.000Z</published>
    <updated>2024-11-26T16:26:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>huggingface上又很多开源模型，可以直接开箱即用，一个简单的模型使用实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertTokenizer, BertModel</span><br><span class="line">tokenizer = BertTokenizer.from_pretrained(<span class="string">&#x27;uer/chinese_roberta_L-8_H-512&#x27;</span>)</span><br><span class="line">model = BertModel.from_pretrained(<span class="string">&quot;uer/chinese_roberta_L-8_H-512&quot;</span>)</span><br><span class="line">text = <span class="string">&quot;用你喜欢的任何文本替换我。&quot;</span></span><br><span class="line">encoded_input = tokenizer(text, return_tensors=<span class="string">&#x27;pt&#x27;</span>)</span><br><span class="line">output = model(**encoded_input)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时候，我们需要finetune自己的模型，通常使用pytorch代码训练，写起来比较复杂，如果使用huggingface的trainer来训练就很方便了。</p><h2 id="训练一个NLU模型"><a href="#训练一个NLU模型" class="headerlink" title="训练一个NLU模型"></a>训练一个NLU模型</h2><p>本文将使用trainer 训练一个牛客网讨论帖文本分类模型。详细过程如下：</p><h3 id="构建数据集"><a href="#构建数据集" class="headerlink" title="构建数据集"></a>构建数据集</h3><p>数据集下载链接：<br><a href="https://github.com/chadqiu/newcoder-crawler/blob/main/train.csv">train data</a><br><a href="https://github.com/chadqiu/newcoder-crawler/blob/main/test.csv">test data</a><br>正常的训练演示用这两个数据集就够了，如果需要训练很精确的模型，可以使用伪标签大数据集<a href="https://github.com/chadqiu/newcoder-crawler/blob/main/generated_pesudo_data.csv">generated pesudo data</a><br>数据集的结构如下：<br><img src="/images/discuss_data.png" alt="dataset"><br>每条数据包含一个文本和一个label，label为： [招聘信息、 经验贴、 求助贴] 三种类型之一。<br>我们需要加载数据集，并将文本tokenize成id，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForMaskedLM, AutoModelForSequenceClassification</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;bert-base-chinese&quot;</span></span><br><span class="line"></span><br><span class="line">max_input_length = <span class="number">128</span></span><br><span class="line">label2id = &#123;</span><br><span class="line">    <span class="string">&#x27;招聘信息&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;经验贴&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;求助贴&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">id2label = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> label2id.items()&#125;</span><br><span class="line"></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_function</span>(<span class="params">examples</span>):</span><br><span class="line">    model_inputs = tokenizer(examples[<span class="string">&quot;text&quot;</span>], max_length=max_input_length, truncation=<span class="literal">True</span>)</span><br><span class="line">    labels = [label2id[x] <span class="keyword">for</span> x <span class="keyword">in</span> examples[<span class="string">&#x27;target&#x27;</span>]]</span><br><span class="line">    model_inputs[<span class="string">&quot;labels&quot;</span>] = labels</span><br><span class="line">    <span class="keyword">return</span> model_inputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">raw_datasets = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.csv&#x27;</span>&#125;)</span><br><span class="line">tokenized_datasets = raw_datasets.<span class="built_in">map</span>(preprocess_function, batched=<span class="literal">True</span>, remove_columns=raw_datasets[<span class="string">&#x27;train&#x27;</span>].column_names)</span><br></pre></td></tr></table></figure><h3 id="定义评价指标函数"><a href="#定义评价指标函数" class="headerlink" title="定义评价指标函数"></a>定义评价指标函数</h3><p>评价指标metric用于evaluate的时候衡量模型的表现，这里使用f1 score 和 accuracy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score, accuracy_score, classification_report</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> EvalPrediction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_label_metrics</span>(<span class="params">predictions, labels, threshold=<span class="number">0.5</span></span>):</span><br><span class="line">    probs =  np.argmax( predictions, -<span class="number">1</span>)       </span><br><span class="line">    y_true = labels</span><br><span class="line">    f1_micro_average = f1_score(y_true=y_true, y_pred=probs, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line">    accuracy = accuracy_score(y_true, probs)</span><br><span class="line">    <span class="built_in">print</span>(classification_report([id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> y_true], [id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> probs]))</span><br><span class="line">    <span class="comment"># return as dictionary</span></span><br><span class="line">    metrics = &#123;<span class="string">&#x27;f1&#x27;</span>: f1_micro_average,</span><br><span class="line">               <span class="string">&#x27;accuracy&#x27;</span>: accuracy&#125;</span><br><span class="line">    <span class="keyword">return</span> metrics</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_metrics</span>(<span class="params">p: EvalPrediction</span>):</span><br><span class="line">    preds = p.predictions[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">isinstance</span>(p.predictions, <span class="built_in">tuple</span>) <span class="keyword">else</span> p.predictions</span><br><span class="line">    result = multi_label_metrics(predictions=preds, labels=p.label_ids)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="指定模型的训练参数"><a href="#指定模型的训练参数" class="headerlink" title="指定模型的训练参数"></a>指定模型的训练参数</h3><p>加载模型，并构建TrainingArguments类，用于指定模型训练的各种参数<br>第一个是训练保存地址为必填项，其他都是选填项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> TrainingArguments, Trainer</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">training_args = TrainingArguments(</span><br><span class="line">    <span class="string">f&quot;/root/autodl-tmp/run&quot;</span>,</span><br><span class="line">    evaluation_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    save_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    learning_rate=<span class="number">2e-4</span>,</span><br><span class="line">    per_device_train_batch_size=batch_size,</span><br><span class="line">    per_device_eval_batch_size=batch_size,</span><br><span class="line">    <span class="comment"># gradient_accumulation_steps=2,</span></span><br><span class="line">    num_train_epochs=<span class="number">10</span>,</span><br><span class="line">    save_total_limit=<span class="number">1</span>,</span><br><span class="line">    weight_decay=<span class="number">0.01</span>,</span><br><span class="line">    load_best_model_at_end=<span class="literal">True</span>,</span><br><span class="line">    metric_for_best_model=metric_name,</span><br><span class="line">    fp16=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定义trainer并进行训练"><a href="#定义trainer并进行训练" class="headerlink" title="定义trainer并进行训练"></a>定义trainer并进行训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trainer = Trainer(</span><br><span class="line">    model,</span><br><span class="line">    training_args,</span><br><span class="line">    train_dataset=tokenized_datasets[<span class="string">&quot;train&quot;</span>],</span><br><span class="line">    eval_dataset=tokenized_datasets[<span class="string">&quot;test&quot;</span>],</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    compute_metrics=compute_metrics</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer.train()  <span class="comment"># 开始训练</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试预测"><a href="#测试预测" class="headerlink" title="测试预测"></a>测试预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trainer.evaluate())  <span class="comment"># 测试</span></span><br><span class="line">trainer.save_model(<span class="string">&quot;bert&quot;</span>)  <span class="comment">#保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行模型预测，并将预测结果输出便于观察</span></span><br><span class="line">predictions, labels, _ = trainer.predict(tokenized_datasets[<span class="string">&quot;test&quot;</span>])</span><br><span class="line">predictions = np.argmax(predictions, axis=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(predictions)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h3><p>将上面代码整合到一起，结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForMaskedLM, AutoModelForSequenceClassification</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> TrainingArguments, Trainer</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score, roc_auc_score, accuracy_score, classification_report</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> EvalPrediction</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> evaluate</span><br><span class="line"></span><br><span class="line">metric = evaluate.load(<span class="string">&quot;seqeval&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;uer/chinese_roberta_L-4_H-512&quot;</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line">max_input_length = <span class="number">128</span></span><br><span class="line">label2id = &#123;</span><br><span class="line">    <span class="string">&#x27;招聘信息&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;经验贴&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;求助贴&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">id2label = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> label2id.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_function</span>(<span class="params">examples</span>):</span><br><span class="line">    model_inputs = tokenizer(examples[<span class="string">&quot;text&quot;</span>], max_length=max_input_length, truncation=<span class="literal">True</span>)</span><br><span class="line">    labels = [label2id[x] <span class="keyword">for</span> x <span class="keyword">in</span> examples[<span class="string">&#x27;target&#x27;</span>]]</span><br><span class="line">    model_inputs[<span class="string">&quot;labels&quot;</span>] = labels</span><br><span class="line">    <span class="keyword">return</span> model_inputs</span><br><span class="line"></span><br><span class="line">raw_datasets = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.csv&#x27;</span>&#125;)</span><br><span class="line">tokenized_datasets = raw_datasets.<span class="built_in">map</span>(preprocess_function, batched=<span class="literal">True</span>, remove_columns=raw_datasets[<span class="string">&#x27;train&#x27;</span>].column_names)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_label_metrics</span>(<span class="params">predictions, labels, threshold=<span class="number">0.5</span></span>):</span><br><span class="line">    probs =  np.argmax( predictions, -<span class="number">1</span>)       </span><br><span class="line">    y_true = labels</span><br><span class="line">    f1_micro_average = f1_score(y_true=y_true, y_pred=probs, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line">    accuracy = accuracy_score(y_true, probs)</span><br><span class="line">    <span class="built_in">print</span>(classification_report([id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> y_true], [id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> probs]))</span><br><span class="line">    <span class="comment"># return as dictionary</span></span><br><span class="line">    metrics = &#123;<span class="string">&#x27;f1&#x27;</span>: f1_micro_average,</span><br><span class="line">               <span class="string">&#x27;accuracy&#x27;</span>: accuracy&#125;</span><br><span class="line">    <span class="keyword">return</span> metrics</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_metrics</span>(<span class="params">p: EvalPrediction</span>):</span><br><span class="line">    preds = p.predictions[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">isinstance</span>(p.predictions, <span class="built_in">tuple</span>) <span class="keyword">else</span> p.predictions</span><br><span class="line">    result = multi_label_metrics(predictions=preds, labels=p.label_ids)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(model_name, </span><br><span class="line">                                        <span class="comment"># problem_type=&quot;multi_label_classification&quot;, </span></span><br><span class="line">                                        num_labels=<span class="number">3</span>,</span><br><span class="line">                                        <span class="comment"># id2label=id2label,</span></span><br><span class="line">                                        <span class="comment"># label2id=label2id</span></span><br><span class="line">                                        )</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">metric_name = <span class="string">&quot;f1&quot;</span></span><br><span class="line"></span><br><span class="line">training_args = TrainingArguments(</span><br><span class="line">    <span class="string">f&quot;/root/autodl-tmp/run&quot;</span>,</span><br><span class="line">    evaluation_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    save_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    learning_rate=<span class="number">2e-4</span>,</span><br><span class="line">    per_device_train_batch_size=batch_size,</span><br><span class="line">    per_device_eval_batch_size=batch_size,</span><br><span class="line">    <span class="comment"># gradient_accumulation_steps=2,</span></span><br><span class="line">    num_train_epochs=<span class="number">10</span>,</span><br><span class="line">    save_total_limit=<span class="number">1</span>,</span><br><span class="line">    weight_decay=<span class="number">0.01</span>,</span><br><span class="line">    load_best_model_at_end=<span class="literal">True</span>,</span><br><span class="line">    metric_for_best_model=metric_name,</span><br><span class="line">    fp16=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer = Trainer(</span><br><span class="line">    model,</span><br><span class="line">    training_args,</span><br><span class="line">    train_dataset=tokenized_datasets[<span class="string">&quot;train&quot;</span>],</span><br><span class="line">    eval_dataset=tokenized_datasets[<span class="string">&quot;test&quot;</span>],</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    compute_metrics=compute_metrics</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer.train()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trainer.evaluate())</span><br><span class="line">trainer.save_model(<span class="string">&quot;bert&quot;</span>)</span><br><span class="line"></span><br><span class="line">predictions, labels, _ = trainer.predict(tokenized_datasets[<span class="string">&quot;test&quot;</span>])</span><br><span class="line">predictions = np.argmax(predictions, axis=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(predictions)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模型推理预测"><a href="#模型推理预测" class="headerlink" title="模型推理预测"></a>模型推理预测</h3><p>使用训练好的模型在其他数据集上推理预测，新数据集是从牛客网爬取的帖子信息,接近4万条，数据链接： <a href="https://github.com/chadqiu/newcoder-crawler/blob/main/historical_data.xlsx">historical_data</a><br>数据截图如下：<br><img src="/images/newcoder_data.png" alt="historical_data"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">&quot;historical_data.xlsx&quot;</span>, sheet_name=<span class="number">0</span>).fillna(<span class="string">&quot; &quot;</span>)</span><br><span class="line">data[<span class="string">&#x27;text&#x27;</span>] = data[<span class="string">&#x27;title&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">str</span>(x) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="string">&quot;&quot;</span>) + data[<span class="string">&#x27;content&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">str</span>(x) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;bert&quot;</span></span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(model_name)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = <span class="string">&quot;cuda:0&quot;</span></span><br><span class="line">    model.half()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line">max_target_length = <span class="number">128</span></span><br><span class="line">label2id = &#123;</span><br><span class="line">    <span class="string">&#x27;招聘信息&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;经验贴&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;求助贴&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">id2label = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> label2id.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_answer</span>(<span class="params">text</span>):</span><br><span class="line">    text = [x <span class="keyword">for</span> x <span class="keyword">in</span> text]</span><br><span class="line">    inputs = tokenizer( text, return_tensors=<span class="string">&quot;pt&quot;</span>, max_length=max_target_length, padding=<span class="literal">True</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">    inputs = &#123;k:v.to(device) <span class="keyword">for</span> k,v <span class="keyword">in</span> inputs.items()&#125;</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        outputs = model(**inputs).logits.argmax(-<span class="number">1</span>).tolist()</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(get_answer(data[&#x27;text&#x27;][:10]))</span></span><br><span class="line"></span><br><span class="line">pred , grod = [], []</span><br><span class="line">index, batch_size = <span class="number">0</span>, <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(data[<span class="string">&#x27;text&#x27;</span>]):</span><br><span class="line">    pred.extend(get_answer([x <span class="keyword">for</span> x <span class="keyword">in</span> data[<span class="string">&#x27;text&#x27;</span>][index:index + batch_size]]))</span><br><span class="line">    index += batch_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pred)</span></span><br><span class="line"><span class="comment"># print(grod)</span></span><br><span class="line"></span><br><span class="line">pred = [id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> pred]</span><br><span class="line">data[<span class="string">&quot;target&quot;</span>] = pred</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&quot;generate.xlsx&quot;</span>)</span><br><span class="line">data.to_excel(writer, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="训练seq2seq生成式模型T5"><a href="#训练seq2seq生成式模型T5" class="headerlink" title="训练seq2seq生成式模型T5"></a>训练seq2seq生成式模型T5</h2><p>上面的例子是判别式模型，只用到了encoder，接下来训练一个encoder-decoder base的生成式模型T5，使用prompt用于训练，prompt方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">input</span>:</span><br><span class="line">请问下面文本属于哪一类帖子？</span><br><span class="line">秋招大结局（泪目了）。家人们泪目了，一波三折之后获得的小奖状，已经准备春招了，没想到被捞啦，嗐，总之是有个结果，还是很开心的[掉小珍珠了][掉小珍珠了]</span><br><span class="line">选项：招聘信息, 经验贴, 求助贴</span><br><span class="line">答案：</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">经验贴</span><br></pre></td></tr></table></figure><h3 id="构建数据集-1"><a href="#构建数据集-1" class="headerlink" title="构建数据集"></a>构建数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset, load_metric</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSeq2SeqLM, T5Tokenizer</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;ClueAI/ChatYuan-large-v1&quot;</span></span><br><span class="line">model = AutoModelForSeq2SeqLM.from_pretrained(model_name)</span><br><span class="line">tokenizer = T5Tokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line">max_input_length = <span class="number">128</span></span><br><span class="line">max_target_length = <span class="number">20</span></span><br><span class="line">prefix = <span class="string">&quot;请问下面文本属于 招聘信息、 经验贴、 求助贴 三者中的哪一类？\n&quot;</span></span><br><span class="line">suffix = <span class="string">&quot;\n选项：招聘信息, 经验贴, 求助贴\n答案：&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_function</span>(<span class="params">examples</span>):</span><br><span class="line">    inputs = [prefix + doc + suffix <span class="keyword">for</span> doc <span class="keyword">in</span> examples[<span class="string">&quot;text&quot;</span>]]</span><br><span class="line">    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Setup the tokenizer for targets</span></span><br><span class="line">    <span class="keyword">with</span> tokenizer.as_target_tokenizer():</span><br><span class="line">        labels = tokenizer(examples[<span class="string">&quot;target&quot;</span>], max_length=max_target_length, truncation=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    model_inputs[<span class="string">&quot;labels&quot;</span>] = labels[<span class="string">&quot;input_ids&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> model_inputs</span><br><span class="line"></span><br><span class="line">raw_datasets = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.csv&#x27;</span>&#125;)</span><br><span class="line">tokenized_datasets = raw_datasets.<span class="built_in">map</span>(preprocess_function, batched=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="等一评价指标"><a href="#等一评价指标" class="headerlink" title="等一评价指标"></a>等一评价指标</h3><p>这次使用不一样的方式来构建评价指标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> evaluate</span><br><span class="line">metric = evaluate.load(<span class="string">&quot;seqeval&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_metrics</span>(<span class="params">eval_pred</span>):</span><br><span class="line">    predictions, labels = eval_pred</span><br><span class="line">    decoded_preds = [tokenizer.batch_decode(predictions, skip_special_tokens=<span class="literal">True</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Replace -100 in the labels as we can&#x27;t decode them.</span></span><br><span class="line">    labels = np.where(labels != -<span class="number">100</span>, labels, tokenizer.pad_token_id)</span><br><span class="line">    decoded_labels = [tokenizer.batch_decode(labels, skip_special_tokens=<span class="literal">True</span>)] </span><br><span class="line">    <span class="keyword">return</span> metric.compute(predictions=decoded_preds, references=decoded_labels)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建trainer训练"><a href="#构建trainer训练" class="headerlink" title="构建trainer训练"></a>构建trainer训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">args = Seq2SeqTrainingArguments(</span><br><span class="line">    <span class="string">f&quot;yuan-finetuned-xsum&quot;</span>,</span><br><span class="line">    evaluation_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    learning_rate=<span class="number">5e-5</span>,</span><br><span class="line">    per_device_train_batch_size=batch_size,</span><br><span class="line">    per_device_eval_batch_size=batch_size * <span class="number">10</span>,</span><br><span class="line">    weight_decay=<span class="number">0.01</span>,</span><br><span class="line">    save_total_limit=<span class="number">3</span>,</span><br><span class="line">    num_train_epochs=<span class="number">3</span>,</span><br><span class="line">    predict_with_generate=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># fp16=True,</span></span><br><span class="line">    <span class="comment"># push_to_hub=True,</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)</span><br><span class="line"></span><br><span class="line">trainer = Seq2SeqTrainer(</span><br><span class="line">    model,</span><br><span class="line">    args,</span><br><span class="line">    train_dataset=tokenized_datasets[<span class="string">&quot;train&quot;</span>],</span><br><span class="line">    eval_dataset=tokenized_datasets[<span class="string">&quot;test&quot;</span>],</span><br><span class="line">    data_collator=data_collator,</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    compute_metrics=compute_metrics</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer.train()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trainer.evaluate())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码整合-1"><a href="#代码整合-1" class="headerlink" title="代码整合"></a>代码整合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset, load_metric</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSeq2SeqLM, T5Tokenizer</span><br><span class="line"><span class="keyword">import</span> evaluate</span><br><span class="line">metric = evaluate.load(<span class="string">&quot;seqeval&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_metrics</span>(<span class="params">eval_pred</span>):</span><br><span class="line">    predictions, labels = eval_pred</span><br><span class="line">    decoded_preds = [tokenizer.batch_decode(predictions, skip_special_tokens=<span class="literal">True</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Replace -100 in the labels as we can&#x27;t decode them.</span></span><br><span class="line">    labels = np.where(labels != -<span class="number">100</span>, labels, tokenizer.pad_token_id)</span><br><span class="line">    decoded_labels = [tokenizer.batch_decode(labels, skip_special_tokens=<span class="literal">True</span>)] </span><br><span class="line">    <span class="keyword">return</span> metric.compute(predictions=decoded_preds, references=decoded_labels)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;ClueAI/ChatYuan-large-v1&quot;</span></span><br><span class="line">model = AutoModelForSeq2SeqLM.from_pretrained(model_name)</span><br><span class="line">tokenizer = T5Tokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line">max_input_length = <span class="number">252</span></span><br><span class="line">max_target_length = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">4</span></span><br><span class="line">prefix = <span class="string">&quot;请问下面文本属于 招聘信息、 经验贴、 求助贴 三者中的哪一类？\n&quot;</span></span><br><span class="line">suffix = <span class="string">&quot;\n选项：招聘信息, 经验贴, 求助贴\n答案：&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_function</span>(<span class="params">examples</span>):</span><br><span class="line">    inputs = [prefix + doc + suffix <span class="keyword">for</span> doc <span class="keyword">in</span> examples[<span class="string">&quot;text&quot;</span>]]</span><br><span class="line">    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Setup the tokenizer for targets</span></span><br><span class="line">    <span class="keyword">with</span> tokenizer.as_target_tokenizer():</span><br><span class="line">        labels = tokenizer(examples[<span class="string">&quot;target&quot;</span>], max_length=max_target_length, truncation=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    model_inputs[<span class="string">&quot;labels&quot;</span>] = labels[<span class="string">&quot;input_ids&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> model_inputs</span><br><span class="line"></span><br><span class="line">raw_datasets = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.csv&#x27;</span>&#125;)</span><br><span class="line">tokenized_datasets = raw_datasets.<span class="built_in">map</span>(preprocess_function, batched=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">args = Seq2SeqTrainingArguments(</span><br><span class="line">    <span class="string">f&quot;yuan-finetuned-yuan&quot;</span>,</span><br><span class="line">    evaluation_strategy = <span class="string">&quot;epoch&quot;</span>,</span><br><span class="line">    learning_rate=<span class="number">5e-5</span>,</span><br><span class="line">    per_device_train_batch_size=batch_size,</span><br><span class="line">    per_device_eval_batch_size=batch_size * <span class="number">10</span>,</span><br><span class="line">    weight_decay=<span class="number">0.01</span>,</span><br><span class="line">    save_total_limit=<span class="number">3</span>,</span><br><span class="line">    num_train_epochs=<span class="number">3</span>,</span><br><span class="line">    predict_with_generate=<span class="literal">True</span>,</span><br><span class="line">    fp16=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)</span><br><span class="line"></span><br><span class="line">trainer = Seq2SeqTrainer(</span><br><span class="line">    model,</span><br><span class="line">    args,</span><br><span class="line">    train_dataset=tokenized_datasets[<span class="string">&quot;train&quot;</span>],</span><br><span class="line">    eval_dataset=tokenized_datasets[<span class="string">&quot;test&quot;</span>],</span><br><span class="line">    data_collator=data_collator,</span><br><span class="line">    tokenizer=tokenizer,</span><br><span class="line">    compute_metrics=compute_metrics</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer.train()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(trainer.evaluate())</span><br><span class="line">trainer.save_model(<span class="string">&quot;yuan&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模型推理预测-1"><a href="#模型推理预测-1" class="headerlink" title="模型推理预测"></a>模型推理预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSeq2SeqLM, T5Tokenizer</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">&quot;historical_data.xlsx&quot;</span>, sheet_name = <span class="number">0</span>).fillna(<span class="string">&quot; &quot;</span>)</span><br><span class="line">data[<span class="string">&#x27;text&#x27;</span>] = data[<span class="string">&#x27;title&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">str</span>(x) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="string">&quot;&quot;</span>) + data[<span class="string">&#x27;content&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">str</span>(x) <span class="keyword">if</span> x <span class="keyword">else</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;yuan&quot;</span></span><br><span class="line">max_target_length = <span class="number">512</span></span><br><span class="line">model = AutoModelForSeq2SeqLM.from_pretrained(model_name)</span><br><span class="line">tokenizer = T5Tokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = <span class="string">&quot;cuda:0&quot;</span></span><br><span class="line">    model.half()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">&quot;请问下面文本属于 招聘信息、 经验贴、 求助贴 三者中的哪一类？\n&quot;</span></span><br><span class="line">suffix = <span class="string">&quot;\n选项：招聘信息, 经验贴, 求助贴\n答案：&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_answer</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    inputs = tokenizer( prefix + <span class="built_in">str</span>(text) + suffix, return_tensors=<span class="string">&quot;pt&quot;</span>, max_length=max_target_length, truncation=<span class="literal">True</span>)</span><br><span class="line">    inputs = &#123;k:v.to(device) <span class="keyword">for</span> k,v <span class="keyword">in</span> inputs.items()&#125;</span><br><span class="line">    <span class="comment"># print(inputs)</span></span><br><span class="line">    outputs = model.generate(**inputs, max_new_tokens=<span class="number">5</span>, return_dict_in_generate=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> tokenizer.decode(outputs[<span class="number">0</span>][<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;target&#x27;</span>] = data[<span class="string">&#x27;text&#x27;</span>].<span class="built_in">map</span>(get_answer)  <span class="comment"># not recommend, it&#x27;s better to generate in batches </span></span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&quot;generate.xlsx&quot;</span>)</span><br><span class="line">data.to_excel(writer, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;huggingface上又很多开源模型，可以直接开箱即用，一个简单的模型使用实例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    <category term="AI" scheme="http://chadqiu.github.io/categories/AI/"/>
    
    
    <category term="huggingface" scheme="http://chadqiu.github.io/tags/huggingface/"/>
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="NLP" scheme="http://chadqiu.github.io/tags/NLP/"/>
    
    <category term="train" scheme="http://chadqiu.github.io/tags/train/"/>
    
  </entry>
  
  <entry>
    <title>如何构建一个自定义huggingface dataset数据集？</title>
    <link href="http://chadqiu.github.io/6fcf23854660.html"/>
    <id>http://chadqiu.github.io/6fcf23854660.html</id>
    <published>2023-02-03T04:37:34.000Z</published>
    <updated>2024-11-26T16:26:22.003Z</updated>
    
    <content type="html"><![CDATA[<p>huggingface dataset中又很多开源数据集，使用起来非常方便，加载数据集代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&quot;glue&quot;</span>, <span class="string">&quot;ax&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时，我们希望使用自己的数据集，又与huggingface代码兼容，那就要自己构建一个dataset了。<br>通常我们的数据是放在csv或excel表格中，通过pandas读取，那如何把表格数据转化为dataset呢？</p><ul><li>csv文件或json文件，直接使用load_dataset</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dataset = load_dataset(<span class="string">&quot;csv&quot;</span>, data_files=<span class="string">&quot;my_file.csv&quot;</span>)</span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;csv&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.csv&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.csv&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">dataset = load_dataset(<span class="string">&quot;json&quot;</span>, data_files=<span class="string">&quot;my_file.json&quot;</span>)</span><br><span class="line">dataset = load_dataset(<span class="string">&#x27;json&#x27;</span>, data_files=&#123;<span class="string">&#x27;train&#x27;</span>: <span class="string">&#x27;train.json&#x27;</span>, <span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test.json&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>通过DatasetDict与from_pandas分别构建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> Dataset, DatasetDict</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">train = Dataset.from_pandas(pd.read_csv(<span class="string">&#x27;train_spam.csv&#x27;</span>))</span><br><span class="line">test = Dataset.from_pandas(pd.read_csv(<span class="string">&#x27;test_spam.csv&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">dataset = DatasetDict()</span><br><span class="line">dataset[<span class="string">&#x27;train&#x27;</span>] = train</span><br><span class="line">dataset[<span class="string">&#x27;test&#x27;</span>] = test</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>通过python的 dict、list、generator构建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict</span></span><br><span class="line">my_dict = &#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">dataset = Dataset.from_dict(my_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list</span></span><br><span class="line">my_list = [&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&quot;a&quot;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&quot;a&quot;</span>: <span class="number">3</span>&#125;]</span><br><span class="line">dataset = Dataset.from_list(my_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_gen</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;<span class="string">&quot;a&quot;</span>: i&#125;</span><br><span class="line">dataset = Dataset.from_generator(my_gen)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;huggingface dataset中又很多开源数据集，使用起来非常方便，加载数据集代码如下所示。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="AI" scheme="http://chadqiu.github.io/categories/AI/"/>
    
    
    <category term="huggingface" scheme="http://chadqiu.github.io/tags/huggingface/"/>
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="dataset" scheme="http://chadqiu.github.io/tags/dataset/"/>
    
    <category term="AI" scheme="http://chadqiu.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>如何从零开始构建一个网络讨论帖分类模型？</title>
    <link href="http://chadqiu.github.io/9244fc05ea6b.html"/>
    <id>http://chadqiu.github.io/9244fc05ea6b.html</id>
    <published>2023-02-03T00:56:52.000Z</published>
    <updated>2024-11-26T16:26:22.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>前几天搭建了一个对牛客网每天最新的工作信息进行爬取的程序，见<a href="https://chadqiu.github.io/f06a19b2ce94.html">牛客网爬虫</a>，但从网上爬取下来的帖子有很多不是工作信息，需要把这部分干扰信息给排除掉，否则很影响使用心情。之前使用关键词与正则表达式进行了简单过滤，但总是有一些漏网之鱼，且容易误伤，如果能训练一个NLP分类模型来进行过滤，那就再好不过了，正好本人的研究方向是NLP，就想试着构建一个模型玩玩了。</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>但一般情况下要训练一个NLP模型需要几千到几万条有标注好的数据，而本项目没有现成的数据，这也是构建模型最困难的地方了。通过爬虫，获取了4万条左右的历史数据，包含id、用户昵称、标题、正文等内容，如下图所示，但没有标签。通过观察，可以把这些帖子大致分成 【招聘信息、经验贴、求助帖】三类，接下来就该考虑如何进行标注了。<br><img src="/images/newcoder_data.png" alt="牛客帖子数据"></p><p>人工标注太费时费力了，而且非常的不优雅，我们还是希望找到一个自动标注的方法，这里首先想到的就是最近两年在学术界比较火的few-shot、zero-shot技术了，且一般模型越大，效果越好。目前能访问到的大模型有： <a href="https://openai.com/">openAI</a>的GPT3及最近大火的chatGPT，<a href="https://wenxin.baidu.com/ernie3">百度文心</a>的 ERNIE 3.0大模型，已经一些机构开源在<a href="https://huggingface.co/models">huggingface</a> 和 <a href="https://modelscope.cn/studios">魔搭社区</a>的大模型，我使用prompt进行了一轮zero-shot尝试。<br>prompt格式示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">请问下面文本属于 招聘信息、 经验贴、 求助贴 三者中的哪一类？</span><br><span class="line">秋招大结局（泪目了）。家人们泪目了，一波三折之后获得的小奖状，已经准备春招了，没想到被捞啦，嗐，总之是有个结果，还是很开心的[掉小珍珠了][掉小珍珠了]</span><br><span class="line"></span><br><span class="line">请问下面文本属于哪一类帖子？</span><br><span class="line">秋招大结局（泪目了）。家人们泪目了，一波三折之后获得的小奖状，已经准备春招了，没想到被捞啦，嗐，总之是有个结果，还是很开心的[掉小珍珠了][掉小珍珠了]</span><br><span class="line">选项：招聘信息, 经验贴, 求助贴</span><br><span class="line">答案：</span><br></pre></td></tr></table></figure><p>经过一轮测试，发现他们的效果如下： chatGPT &gt; 百度文心  &gt;&gt;  others<br>chatGPT表现较好，绝大本分都预测的比较准确，百度文心也基本可用，大部分都能答正确，之后就准备使用API来调用这两个大模型来标数据了，但百度文心每天只能访问200次，我很快超出次数限制，现阶段还不能直接付费购买服务，只能填合作申请表，然后等待。<br>chatGPT不对中国用户开放，无法直接注册账户，通过特殊方法也是可以注册上的。前段时间翻墙后还能正常访问chatGPT的页面，但现在访问不了了，API在国内也访问不了，但可以采用“东数西算”的思想，把数据拿到国外的服务器上计算就行了，最简单的方法就是使用google的colab，免费创建一个notebook，并把数据传到google drive 或 GitHub，然后访问openAI的api。调用api需要先到<a href="https://platform.openai.com/account/api-keys">官网</a>上申请一个API key，然后再调用，使用pyhton调用API的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line">openai.api_key = <span class="string">&quot;your api key&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;&#x27;请问下面文本属于哪一类帖子？</span></span><br><span class="line"><span class="string">viv0社招。 #春招# 有匹配岗位 有意向大佬欢迎＋微g1r4ffe内推 ...viv0社招开启，岗位多多hc多多。博士应聘专家岗位有1年以上工作经验即可 #社招#</span></span><br><span class="line"><span class="string">选项：招聘信息, 经验贴, 求助贴</span></span><br><span class="line"><span class="string">答案：&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">rst = openai.Completion.create(</span><br><span class="line">  model=<span class="string">&quot;text-davinci-003&quot;</span>, </span><br><span class="line">  prompt= s,</span><br><span class="line">  max_tokens=<span class="number">15</span>,</span><br><span class="line">  temperature=<span class="number">0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rst[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: 招聘信息</span></span><br></pre></td></tr></table></figure><p>直接进去还没有chatGPT的API，但有 text-davinci-003 这一强大的模型，它基于GPT3大模型，使用了跟chatGPT相似的instruction训练，亲测效果很好，跟chatGPT差不多，甚至可以说就是chatGPT了。最终，用API标注了500条左右的数据，然后又人工标注了100条数据作为测试集。</p><h2 id="模型与训练"><a href="#模型与训练" class="headerlink" title="模型与训练"></a>模型与训练</h2><p>训练的基本策略为使用伪标签技术，即先使用少量数据训练一个模型，让这个模型去标数据，然后用其标注的数据集进行训练，最后结果往往会超过原来那个标注的模型。<br>由于500条数据仍然很小，属于few-shot的范围了，因此希望使用尽量大的模型，一般模型越大，表现往往越好，大模型的few-shot能力也强，我在AutoDL上租了个24GB显存的A5000GPU，最大也就能训练1.3B大小的模型，但经过一系列实验后发现，居然是roberta-large表现最好，在我那个100数据的小测试集上F1 score超过了90%，然后用它对剩下的3万多条数据进行预测，生成标注数据集，最后使用该数据集训练一个新模型。<br>由于后期要在cpu上运行，因此希望使用尽量小的模型，这里选择了腾讯的 uer&#x2F;chinese_roberta_L-4_H-512 模型进行训练，训练结果出人意料的好(也许是测试集太小，不准确)，如下图所示：<br><img src="/images/newcoder_f1.png"></p><p>训练完成后的模型在roberta4h512文件夹中，可通过huggingface本地读取，读取示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from transformers import AutoTokenizer, AutoModelForSequenceClassification</span><br><span class="line">model_name = &quot;roberta4h512&quot;</span><br><span class="line">model = AutoModelForSequenceClassification.from_pretrained(model_name)</span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模型训练代码： <a href="https://github.com/chadqiu/newcoder-crawler/blob/main/bert_train.py">bert_train.py</a><br>使用训练好的模型进行伪标签数据生成的代码：<a href="https://github.com/chadqiu/newcoder-crawler/blob/main/predict.py">predict.py</a><br>模型训练细节见 <a href="https://chadqiu.github.io/e819d4a7ec80.html">如何使用huggingface的trainer训练模型？</a></p><h2 id="预测过滤"><a href="#预测过滤" class="headerlink" title="预测过滤"></a>预测过滤</h2><p>我们把爬回来的帖子中预测为招聘信息的帖子留下来，其他的过滤掉即可。爬虫程序一天执行一次，可以采用类似懒加载的方式加载模型，为了性能，需要分batch进行计算, 实测在cpu下183条数据需要6.5s左右，平均每条数据推理时间在36ms左右。预测代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_batch_generate</span>(<span class="params">texts, model, tokenizer, id2label = &#123;<span class="number">0</span>: <span class="string">&#x27;招聘信息&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;经验贴&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;求助贴&#x27;</span>&#125;, max_length = <span class="number">128</span></span>):</span><br><span class="line">    inputs = tokenizer( texts, return_tensors=<span class="string">&quot;pt&quot;</span>, max_length=<span class="number">128</span>, padding=<span class="literal">True</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">    outputs = model(**inputs).logits.argmax(-<span class="number">1</span>).tolist()</span><br><span class="line">    <span class="keyword">return</span> [id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> outputs]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_predict</span>(<span class="params">text_list, model = <span class="literal">None</span>, tokenizer = <span class="literal">None</span>, model_name = <span class="string">&quot;roberta4h512&quot;</span>, batch_size = <span class="number">4</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text_list: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> model:</span><br><span class="line">        model = AutoModelForSequenceClassification.from_pretrained(model_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tokenizer:</span><br><span class="line">        tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    result, start = [], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(start &lt; <span class="built_in">len</span>(text_list)):</span><br><span class="line">        result.extend(_batch_generate(text_list[start : start + batch_size], model, tokenizer))</span><br><span class="line">        start += batch_size</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ss = [</span><br><span class="line">    <span class="string">&#x27;秋招大结局（泪目了）。家人们泪目了，一波三折之后获得的小奖状，已经准备春招了，没想到被捞啦，嗐，总之是有个结果，还是很开心的[掉小珍珠了][掉小珍珠了]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;找到工作之后还要继续找吗。5k 加班严重 春招还想继续找 大家有什么好的建议 #我的求职思考# ...双非应届本科 拿了一个广州嵌入式offer 待遇9.&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model_predict(ss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: [&#x27;经验贴&#x27;, &#x27;求助贴&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>项目guthub地址：<a href="https://github.com/chadqiu/newcoder-crawler">https://github.com/chadqiu/newcoder-crawler</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;前几天搭建了一个对牛客网每天最新的工作信息进行爬取的程序，见&lt;a href=</summary>
      
    
    
    
    <category term="AI" scheme="http://chadqiu.github.io/categories/AI/"/>
    
    
    <category term="huggingface" scheme="http://chadqiu.github.io/tags/huggingface/"/>
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="AI" scheme="http://chadqiu.github.io/tags/AI/"/>
    
    <category term="NLP" scheme="http://chadqiu.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索</title>
    <link href="http://chadqiu.github.io/79bdc4d1f745.html"/>
    <id>http://chadqiu.github.io/79bdc4d1f745.html</id>
    <published>2023-01-27T17:59:16.000Z</published>
    <updated>2024-11-26T16:26:22.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>二分搜索主要思想：在有序数组<code>nums</code>的给定搜索区间<code>[left, right]</code>中搜索答案<code>target</code>，每一次搜索比较<code>nums[mid]</code>与<code>target</code>，若相等则找到答案，若不等则可以排除掉一半区间，减少候选集的大小，注意<code>mid</code>要被排除在下一次搜索区间之外。</p><p>二分查找代码框架如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若<code>nums = [1,2,2,2,3]</code>，<code>target = 2</code>，如何用二分搜索方法找到<code>target</code>出现的左右边界？<br>上面的代码框架包含了查找精确位置及查找左右边界，需要填充的部分的主要思想是保证搜索区间不能漏掉一个元素，也不能重复一个元素。</p><p>当搜索区间左右都是闭区间<code>[left, right]</code>的时候，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; nums.length &amp;&amp; nums[left] == target)</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rightBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == target) </span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>规律总结：</p><p>当 <code>nums[mid] == target</code> 时，精确查找直接<code>return</code>，边界查找将mid排除在查找区间之外，找左边界时缩小右边，找右边界时缩小左边；<br>当 <code>nums[mid] ！= target</code> 时，将<code>mid</code>排除在下一次的查找区间之外。</p><p>对于边界查找，也可以使 <code>right = nums.length</code>， 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length; <span class="comment">// 注意</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (left &lt; nums.length &amp;&amp; nums[left] == target)</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rightBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &gt;= <span class="number">1</span> &amp;&amp; nums[right - <span class="number">1</span>] == target) </span><br><span class="line">        <span class="keyword">return</span> right - <span class="number">1</span>;   <span class="comment">// 注意</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时搜索的区间是左闭右开区间<code>[left, right)</code>，<code>while()</code>中用的是<code>&lt;</code>而不是<code>&lt;=</code>，因为 [x, x)为空集<br>当 <code>nums[mid] == target</code> 时，将mid排除在查找区间之外，找左边界时缩小右边，找右边界时缩小左边；<br>当 <code>nums[mid] ！= target</code> 时，将mid排除在下一次的查找区间之外</p><h2 id="规律总结"><a href="#规律总结" class="headerlink" title="规律总结"></a>规律总结</h2><ul><li>二分查找每次比较搜索区间的中点，当初始化 <code>right = nums.length - 1</code> 时搜索区间为闭区间<code>[left, right]</code>，初始化 <code>right = nums.length</code> 时搜索区间为左闭右开区间<code>[left, right)</code>，二者等效；</li><li><code>while()</code>中用的是 <code>&lt;</code> 还是 <code>&lt;=</code> 取决于当 <code>left == right</code> 时是否为空集, 确保不遗漏、不重复;</li><li>当 <code>nums[mid] == target</code> 时，精确查找直接<code>return</code>，边界查找将mid排除在查找区间之外，找左边界时缩小右边，找右边界时缩小左边；</li><li>当 <code>nums[mid] != target</code> 时，将<code>mid</code>排除在下一次的查找区间之外。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;二分搜索主要思想：在有序数组&lt;code&gt;nums&lt;/code&gt;的给定搜索区间&lt;code&gt;[left, right]&lt;/code&gt;中搜索答案&lt;</summary>
      
    
    
    
    <category term="计算机基础 - 数据结构与算法" scheme="http://chadqiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://chadqiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分搜索" scheme="http://chadqiu.github.io/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    
    <category term="Java" scheme="http://chadqiu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>谷歌学术爬虫</title>
    <link href="http://chadqiu.github.io/083653212f47.html"/>
    <id>http://chadqiu.github.io/083653212f47.html</id>
    <published>2023-01-27T09:27:35.000Z</published>
    <updated>2024-11-26T16:26:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>一个针对谷歌学术(Google scholar)的爬虫，需要科学上网。<br>支持根据关键词搜索相关的论文前N篇论文，获取论文的主要信息信息。</p><h2 id="根据关键词搜索"><a href="#根据关键词搜索" class="headerlink" title="根据关键词搜索"></a>根据关键词搜索</h2><p><img src="https://img-blog.csdnimg.cn/c916f42f39694b9eb19c634861784498.png" alt="网页截图"></p><p>可以指定：关键词、开始时间、结束时间、返回论文的数量（建议不超过200，否则容易被封），爬取的结果包括： [论文标题, 引用数, 发表时间及机构缩写, 论文链接]，见上图划线的部分<br>结果会print出来，同时也会自动保存到一个excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;Chrome/90.0.4430.93 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_paper_page</span>(<span class="params">url</span>):</span><br><span class="line">    req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    res = urllib.request.urlopen(req, timeout=<span class="number">100</span>)</span><br><span class="line">    html=res.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soup=BeautifulSoup(html)</span><br><span class="line">    data = [[div.select(<span class="string">&#x27;.gs_rt &gt; a&#x27;</span>)[<span class="number">0</span>].text, div.select(<span class="string">&#x27;.gs_fl &gt; a&#x27;</span>)[<span class="number">2</span>].string, re.search(<span class="string">&quot;- .*?\&lt;/div&gt;&quot;</span>, <span class="built_in">str</span>(div.select(<span class="string">&#x27;.gs_a&#x27;</span>)[<span class="number">0</span>])).group()[<span class="number">1</span>:-<span class="number">6</span>].replace(<span class="string">&quot;\xa0&quot;</span>, <span class="string">&quot;&quot;</span>), div.select(<span class="string">&#x27;.gs_rt &gt; a&#x27;</span>)[<span class="number">0</span>][<span class="string">&quot;href&quot;</span>]] <span class="keyword">for</span> div <span class="keyword">in</span> soup.select(<span class="string">&#x27;.gs_ri&#x27;</span>)]</span><br><span class="line">    data = [[x[<span class="number">0</span>], <span class="built_in">int</span>(x[<span class="number">1</span>][<span class="number">6</span>:]) <span class="keyword">if</span> x[<span class="number">1</span>] != <span class="literal">None</span> <span class="keyword">and</span> x[<span class="number">1</span>].startswith(<span class="string">&quot;被引用次数&quot;</span>) <span class="keyword">else</span> <span class="number">0</span>, x[<span class="number">2</span>], x[<span class="number">3</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> data]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_paper_list</span>(<span class="params">data, file_name</span>):</span><br><span class="line">    data = pd.DataFrame(data, columns=[<span class="string">&#x27;paper title&#x27;</span>, <span class="string">&#x27;reference&#x27;</span>, <span class="string">&#x27;publish info&#x27;</span>, <span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">    writer = pd.ExcelWriter(file_name)</span><br><span class="line">    data.to_excel(writer, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">    writer.save()</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_paper_list_by_keywork</span>(<span class="params">keyword, start_year = <span class="literal">None</span>, end_year = <span class="literal">None</span>, max_capacity = <span class="number">100</span>, debug_mode = <span class="literal">False</span>, save_file = <span class="string">&quot;paper_list.xlsx&quot;</span>, retry_times = <span class="number">3</span></span>):</span><br><span class="line">    keyword = re.sub(<span class="string">&quot; +&quot;</span>, <span class="string">&quot;+&quot;</span>, keyword.strip())</span><br><span class="line">    url_base = <span class="string">&#x27;https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&#x27;</span></span><br><span class="line"></span><br><span class="line">    url_base = url_base + <span class="string">&#x27;&amp;q=&#x27;</span> + keyword</span><br><span class="line">    <span class="keyword">if</span> start_year != <span class="literal">None</span>:</span><br><span class="line">        url_base += <span class="string">&quot;&amp;as_ylo=&quot;</span> + <span class="built_in">str</span>(start_year)</span><br><span class="line">    <span class="keyword">if</span> end_year != <span class="literal">None</span>:</span><br><span class="line">        url_base += <span class="string">&quot;&amp;as_yhi=&quot;</span> + <span class="built_in">str</span>(end_year)</span><br><span class="line"></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">while</span> start &lt; max_capacity:</span><br><span class="line">        url = url_base + <span class="string">&quot;&amp;start=&quot;</span> + <span class="built_in">str</span>(start)</span><br><span class="line">        start += <span class="number">10</span></span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(retry_times):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data.extend(get_paper_page(url))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> i &lt; retry_times -<span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;error, retrying ... &quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;error, fail to get &quot;</span>, url)</span><br><span class="line">                <span class="keyword">if</span> debug_mode:</span><br><span class="line">                    traceback.print_exc()</span><br><span class="line">                time.sleep(<span class="number">20</span>)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># data: [论文标题, 引用数, 发表时间及机构缩写, 论文链接]</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    save_paper_list(data, save_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_paper_list_by_keywork(<span class="string">&quot; named entity recognition &quot;</span>, start_year=<span class="number">2020</span>, max_capacity=<span class="number">100</span>, debug_mode=<span class="literal">False</span>, save_file = <span class="string">&quot;paper_list.xlsx&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>爬取结果如下图所示：</p><p><img src="/images/paper%20list.png" alt="结果截图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个针对谷歌学术(Google scholar)的爬虫，需要科学上网。&lt;br&gt;支持根据关键词搜索相关的论文前N篇论文，获取论文的主要信息信息。&lt;/p&gt;
&lt;h2 id=&quot;根据关键词搜索&quot;&gt;&lt;a href=&quot;#根据关键词搜索&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="tools - 爬虫" scheme="http://chadqiu.github.io/categories/tools-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="爬虫" scheme="http://chadqiu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="谷歌学术" scheme="http://chadqiu.github.io/tags/%E8%B0%B7%E6%AD%8C%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>牛客网爬虫</title>
    <link href="http://chadqiu.github.io/f06a19b2ce94.html"/>
    <id>http://chadqiu.github.io/f06a19b2ce94.html</id>
    <published>2023-01-27T08:43:42.000Z</published>
    <updated>2024-11-26T16:26:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>爬取牛客网的帖子，获取一些感兴趣的信息，比如职位内推等。<br>为获得每日最新数据，系统使用增量更新，老数据保存到mysql数据库中用于去重，使用NLP分类模型进行内容筛选，过滤掉无关内容，每日新增的数据发邮件提醒，使用crontab定时任务每天自动运行，邮件效果如下图所示:</p><p><img src="https://img-blog.csdnimg.cn/dc63410d0da4456e836c9a4ccfcd338e.png" alt="邮件截图"></p><h2 id="MySQL数据表结构如下"><a href="#MySQL数据表结构如下" class="headerlink" title="MySQL数据表结构如下"></a>MySQL数据表结构如下</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `newcoder_search`(</span><br><span class="line">   `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `title` <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   `content` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `<span class="keyword">user</span>` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `url` <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `created_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `edited_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( `id` )</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h2 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h2><p>爬取并解析数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_parse_newcoder_page</span>(<span class="params">data, skip_words, start_date</span>):</span><br><span class="line">    <span class="keyword">assert</span> data[<span class="string">&#x27;success&#x27;</span>] == <span class="literal">True</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;|&quot;</span>.join(skip_words)) </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;records&#x27;</span>]:</span><br><span class="line">        x = x[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        dic = &#123;<span class="string">&quot;user&quot;</span>: x[<span class="string">&#x27;userBrief&#x27;</span>][<span class="string">&#x27;nickname&#x27;</span>]&#125;</span><br><span class="line">        </span><br><span class="line">        x = x[<span class="string">&#x27;contentData&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;contentData&#x27;</span> <span class="keyword">in</span> x <span class="keyword">else</span> x[<span class="string">&#x27;momentData&#x27;</span>]</span><br><span class="line">        dic[<span class="string">&#x27;title&#x27;</span>] = x[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        dic[<span class="string">&#x27;content&#x27;</span>] = x[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        dic[<span class="string">&#x27;id&#x27;</span>] = <span class="built_in">int</span>(x[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        dic[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&#x27;https://www.nowcoder.com/discuss/&#x27;</span> + <span class="built_in">str</span>(x[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(skip_words) &gt; <span class="number">0</span> <span class="keyword">and</span> pattern.search(x[<span class="string">&#x27;title&#x27;</span>] + x[<span class="string">&#x27;content&#x27;</span>]) != <span class="literal">None</span>:  <span class="comment">#关键词正则过滤</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">  </span><br><span class="line">        createdTime = x[<span class="string">&#x27;createdAt&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;createdAt&#x27;</span> <span class="keyword">in</span> x <span class="keyword">else</span> x[<span class="string">&#x27;createTime&#x27;</span>]</span><br><span class="line">        dic[<span class="string">&#x27;createTime&#x27;</span>] = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(createdTime // <span class="number">1000</span>))</span><br><span class="line">        dic[<span class="string">&#x27;editTime&#x27;</span>] = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(x[<span class="string">&#x27;editTime&#x27;</span>] // <span class="number">1000</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> dic[<span class="string">&#x27;editTime&#x27;</span>] &lt; start_date: <span class="comment"># 根据时间过滤</span></span><br><span class="line">            <span class="keyword">continue</span>  </span><br><span class="line">        res.append(dic)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_newcoder_page</span>(<span class="params">page = <span class="number">1</span>, keyword = <span class="string">&quot;校招&quot;</span>, skip_words = [], start_date = <span class="string">&#x27;2023&#x27;</span></span>):</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>:<span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;all&quot;</span>, </span><br><span class="line">        <span class="string">&quot;query&quot;</span>: keyword, </span><br><span class="line">        <span class="string">&quot;page&quot;</span>: page, </span><br><span class="line">        <span class="string">&quot;tag&quot;</span>: [], </span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="string">&quot;create&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;https://gw-c.nowcoder.com/api/sparta/pc/search&#x27;</span>, data = json.dumps(data), headers = header, )</span><br><span class="line">    data =  _parse_newcoder_page(x.json(), skip_words, start_date)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据落库去重"><a href="#数据落库去重" class="headerlink" title="数据落库去重"></a>数据落库去重</h2><p>将数据存入数据库，根据id去重，如果id不存在则insert，如果id已存在但editTime 有变化则update， 否则是重复的过滤掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upsert_to_db</span>(<span class="params">data, host, user, passwd, database,charset, port</span>):</span><br><span class="line">    db = pymysql.connect(</span><br><span class="line">          host=host,</span><br><span class="line">          user=user,</span><br><span class="line">          passwd=passwd,</span><br><span class="line">          database = database,</span><br><span class="line">          charset=charset,</span><br><span class="line">          port = port</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor = db.cursor()  </span><br><span class="line">        sql = <span class="string">&quot;select id, edited_time from newcoder_search where id in (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;,&quot;</span>.join([<span class="built_in">str</span>(x[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> data]))</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        exists = cursor.fetchall()</span><br><span class="line">        dic = &#123;x[<span class="number">0</span>] : x[<span class="number">1</span>].strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> exists&#125;</span><br><span class="line"></span><br><span class="line">        insert_data = [[x[k] <span class="keyword">for</span> k <span class="keyword">in</span> x] <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> dic]</span><br><span class="line">        update_data = [(x[<span class="string">&#x27;editTime&#x27;</span>], x[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">in</span> dic <span class="keyword">and</span> dic[x[<span class="string">&#x27;id&#x27;</span>]] != x[<span class="string">&#x27;editTime&#x27;</span>]]</span><br><span class="line">        sql = <span class="string">&quot;INSERT INTO newcoder_search (user, title, content, id, url, created_time, edited_time) VALUES(%s, %s, %s, %s, %s, %s, %s)&quot;</span></span><br><span class="line">        cursor.executemany(sql, insert_data)</span><br><span class="line">        sql = <span class="string">&quot;update newcoder_search set edited_time = %s where id = %s&quot;</span></span><br><span class="line">        cursor.executemany(sql, update_data)</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;db error: &quot;</span>, e)</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> dic], [x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">in</span> dic <span class="keyword">and</span> dic[x[<span class="string">&#x27;id&#x27;</span>]] != x[<span class="string">&#x27;editTime&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>将新创建的帖子与原有的但更改过的帖子区分开发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_table_html_generate</span>(<span class="params">data</span>):</span><br><span class="line">    s = <span class="string">&#x27;&lt;table&gt;&#x27;</span></span><br><span class="line">    s += <span class="string">&#x27;&lt;tr&gt;&#x27;</span> + <span class="string">&quot;\n&quot;</span>.join([<span class="string">&quot;&lt;th&gt;&quot;</span> + x + <span class="string">&#x27;&lt;/th&gt;&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> data[<span class="number">0</span>]]) + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        s += <span class="string">&#x27;&lt;tr&gt;&#x27;</span> + <span class="string">&quot;\n&quot;</span>.join([<span class="string">&quot;&lt;td&gt;&quot;</span> + <span class="built_in">str</span>(d[x]) + <span class="string">&#x27;&lt;/td&gt;&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> d]) + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span></span><br><span class="line">    s += <span class="string">&#x27;&lt;/table&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">insert_data, update_data, mail_host, mail_user, mail_pass, sender, receivers</span>):</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(insert_data) &gt; <span class="number">0</span>:</span><br><span class="line">        msg += <span class="string">&#x27;&lt;h1&gt;insert&lt;/h1&gt;&lt;/br&gt;&#x27;</span> + _table_html_generate(insert_data) + <span class="string">&#x27;&lt;/br&gt;&lt;/br&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(update_data) &gt; <span class="number">0</span>:</span><br><span class="line">        msg += <span class="string">&#x27;&lt;h1&gt;update&lt;/h1&gt;&lt;/br&gt;&#x27;</span> + _table_html_generate(update_data) + <span class="string">&#x27;&lt;/br&gt;&lt;/br&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        msg = <span class="string">&#x27;&lt;h1&gt;今日无新增数据&lt;/h1&gt;&lt;/br&gt;&#x27;</span></span><br><span class="line">        </span><br><span class="line">    message = MIMEText(msg, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    message[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;牛客网&#123;&#125;招聘信息&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>))</span><br><span class="line">    message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line">    message[<span class="string">&#x27;To&#x27;</span>] = receivers[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP_SSL(mail_host, <span class="number">465</span>)</span><br><span class="line">        <span class="comment">#smtpObj.connect(mail_host, 465)</span></span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        smtpObj.sendmail(</span><br><span class="line">            sender, receivers, message.as_string())</span><br><span class="line">        smtpObj.quit()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;email send error: &#x27;</span>, e)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>    </span><br></pre></td></tr></table></figure><h2 id="集成控制"><a href="#集成控制" class="headerlink" title="集成控制"></a>集成控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">keywords, skip_words, db_config, mail_config = <span class="literal">None</span></span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keywords:</span><br><span class="line">        <span class="built_in">print</span>(key, time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            page = get_newcoder_page(i, key, skip_words)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> page: </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res.extend(page)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    result, ids = [], <span class="built_in">set</span>()  <span class="comment"># 去重</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">if</span> x[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">in</span> ids: <span class="keyword">continue</span></span><br><span class="line">        ids.add(x[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">        result.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total num: &quot;</span>, <span class="built_in">len</span>(result))</span><br><span class="line">    x = upsert_to_db(result, **db_config)  <span class="comment"># insert_data, update_data</span></span><br><span class="line">    <span class="keyword">if</span> mail_config:</span><br><span class="line">        send_email(*x, **mail_config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(): </span><br><span class="line">    <span class="comment"># 指定要过滤的词</span></span><br><span class="line">    skip_words=[<span class="string">&#x27;求捞&#x27;</span>, <span class="string">&#x27;泡池子&#x27;</span>, <span class="string">&#x27;池子了&#x27;</span>, <span class="string">&#x27;池子中&#x27;</span>, <span class="string">&#x27;offer对比&#x27;</span>, <span class="string">&#x27;总结一下&#x27;</span>, <span class="string">&#x27;给个建议&#x27;</span>, <span class="string">&#x27;开奖群&#x27;</span>, <span class="string">&#x27;没消息&#x27;</span>, <span class="string">&#x27;有消息&#x27;</span>, <span class="string">&#x27;拉垮&#x27;</span>, <span class="string">&#x27;求一个&#x27;</span>, <span class="string">&#x27;求助&#x27;</span>, <span class="string">&#x27;池子的&#x27;</span>, <span class="string">&#x27;决赛圈&#x27;</span>, <span class="string">&#x27;offer比较&#x27;</span>, <span class="string">&#x27;求捞&#x27;</span>, <span class="string">&#x27;补录面经&#x27;</span>, <span class="string">&#x27;捞捞&#x27;</span>, <span class="string">&#x27;收了我吧&#x27;</span>, <span class="string">&#x27;offer选择&#x27;</span>, <span class="string">&#x27;有offer了&#x27;</span>, <span class="string">&#x27;想问一下&#x27;</span>, <span class="string">&#x27;kpi吗&#x27;</span>, <span class="string">&#x27;kpi面吗&#x27;</span>, <span class="string">&#x27;kpi面吧&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 指定搜索的关键词</span></span><br><span class="line">    keywords = [<span class="string">&#x27;补招&#x27;</span>, <span class="string">&#x27;补录&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#配置数据库信息</span></span><br><span class="line">    db_config = &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span> : <span class="string">&quot;localhost&quot;</span>, </span><br><span class="line">        <span class="string">&quot;user&quot;</span> : <span class="string">&quot;root&quot;</span>, </span><br><span class="line">        <span class="string">&quot;passwd&quot;</span> : <span class="string">&quot;your password&quot;</span>, </span><br><span class="line">        <span class="string">&quot;database&quot;</span> : <span class="string">&#x27;your database&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;charset&quot;</span> : <span class="string">&#x27;utf8&#x27;</span>, </span><br><span class="line">        <span class="string">&quot;port&quot;</span>: your mysql port</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 配置邮箱信息</span></span><br><span class="line">    mail_config = &#123;</span><br><span class="line">        <span class="string">&quot;mail_host&quot;</span> : <span class="string">&#x27;smtp server host&#x27;</span>, </span><br><span class="line">        <span class="string">&quot;mail_user&quot;</span> : <span class="string">&#x27;your user name&#x27;</span>, </span><br><span class="line">        <span class="string">&quot;mail_pass&quot;</span> : <span class="string">&#x27;password&#x27;</span>,   <span class="comment"># 密码(部分邮箱为授权码)</span></span><br><span class="line">        <span class="string">&quot;sender&quot;</span> : <span class="string">&#x27;sender email&#x27;</span>, </span><br><span class="line">        <span class="string">&quot;receivers&quot;</span> : [<span class="string">&quot;receivers email&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    run(keywords, skip_words, db_config, mail_config)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="内容筛选"><a href="#内容筛选" class="headerlink" title="内容筛选"></a>内容筛选</h2><p>直接爬下来的帖子既包含招聘信息，又包含求职者发布的面经、讨论贴等其他内容，现在希望过滤掉那些无关的帖子。<br>第一版只写了一个根据关键词和正则表达式进行过滤的功能，用户指定<code>skip_words</code>，凡包含这里面的关键词的都会被过滤。过滤方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">skip_words = [<span class="string">&#x27;求捞&#x27;</span>, <span class="string">&#x27;泡池子&#x27;</span>, <span class="string">&#x27;兄弟们&#x27;</span>, <span class="string">&#x27;姐妹们&#x27;</span>, <span class="string">&#x27;家人们&#x27;</span>, <span class="string">&#x27;狗都\\w&#123;0,2&#125;去&#x27;</span>, <span class="string">&#x27;有推荐\\w&#123;0,5&#125;吗&#x27;</span>, <span class="string">&#x27;选offer&#x27;</span>, <span class="string">&#x27;交流一下&#x27;</span>, <span class="string">&#x27;该怎么办&#x27;</span>, <span class="string">&#x27;坐立不安&#x27;</span>, <span class="string">&#x27;辗转难眠&#x27;</span>, <span class="string">&#x27;哈哈哈&#x27;</span>, <span class="string">&#x27;求支招&#x27;</span>, <span class="string">&#x27;求经验&#x27;</span>, <span class="string">&#x27;抱大腿&#x27;</span>, <span class="string">&#x27;有没有\\w&#123;0,3&#125;懂&#x27;</span>, <span class="string">&#x27;诈骗&#x27;</span>, <span class="string">&#x27;毁约&#x27;</span>, <span class="string">&#x27;秋招历程&#x27;</span>, <span class="string">&#x27;求\\w&#123;0,5&#125;建议&#x27;</span>, <span class="string">&#x27;二战&#x27;</span>, <span class="string">&#x27;感觉有点悬&#x27;</span>, <span class="string">&#x27;写给\\w&#123;0,10&#125;同学&#x27;</span>, <span class="string">&#x27;好心人&#x27;</span>, <span class="string">&#x27;一脸懵逼&#x27;</span>, <span class="string">&#x27;纠结&#x27;</span>, <span class="string">&#x27;有推荐\\w&#123;0,1&#125;的&#x27;</span>, <span class="string">&#x27;如何准备&#x27;</span>, <span class="string">&#x27;帮\\w&#123;0,1&#125;选一下&#x27;</span>, <span class="string">&#x27;考研\\w&#123;0,2&#125;失败&#x27;</span>, <span class="string">&#x27;求指导&#x27;</span>, <span class="string">&#x27;开始了吗&#x27;</span>, <span class="string">&#x27;秋招总结&#x27;</span>, <span class="string">&#x27;校招总结&#x27;</span>, <span class="string">&#x27;还有机会吗&#x27;</span>, <span class="string">&#x27;池子了&#x27;</span>, <span class="string">&#x27;池子中&#x27;</span>, <span class="string">&#x27;offer对比&#x27;</span>, <span class="string">&#x27;开奖群&#x27;</span>, <span class="string">&#x27;拉垮&#x27;</span>, <span class="string">&#x27;求一个&#x27;</span>, <span class="string">&#x27;求助&#x27;</span>, <span class="string">&#x27;池子的&#x27;</span>, <span class="string">&#x27;决赛圈&#x27;</span>, <span class="string">&#x27;offer比较&#x27;</span>, <span class="string">&#x27;迷茫的人&#x27;</span>, <span class="string">&#x27;年度总结&#x27;</span>, <span class="string">&#x27;有没有友友&#x27;</span>, <span class="string">&#x27;救救孩子&#x27;</span>, <span class="string">&#x27;骂醒&#x27;</span>, <span class="string">&#x27;问\\w&#123;0,2&#125;大佬&#x27;</span>, <span class="string">&#x27;一般\\w&#123;0,4&#125;怎么找&#x27;</span>, <span class="string">&#x27;考研人&#x27;</span>, <span class="string">&#x27;求指导&#x27;</span>, <span class="string">&#x27;求捞&#x27;</span>, <span class="string">&#x27;补录面经&#x27;</span>, <span class="string">&#x27;捞捞&#x27;</span>, <span class="string">&#x27;收了我吧&#x27;</span>, <span class="string">&#x27;offer选择&#x27;</span>, <span class="string">&#x27;想问一下&#x27;</span>, <span class="string">&#x27;kpi\\w&#123;0,1&#125;吗&#x27;</span>, <span class="string">&#x27;kpi\\w&#123;0,1&#125;吧&#x27;</span>]</span><br><span class="line">s = <span class="string">&quot;大佬们可以帮我看一下简历吗。 想参加春招，可以帮忙看一下简历吗 #如何看待2023届秋招# #简历# #春招提前批#...北京某末流211工商管理大类专业，没什么特别突出的经历，学校没有参加过大赛，&quot;</span></span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;|&quot;</span>.join(skip_words)) </span><br><span class="line"><span class="keyword">if</span> pattern.search(s) != <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;filter out this data&quot;</span>)</span><br></pre></td></tr></table></figure><p>但这种方法也不是很准，还是会有漏网之鱼，怎么才能实现更精准的过滤呢？<br>一种可能的方案是训练一个NLP分类模型进行过滤，但这需要大量数据进行训练，目前我已爬取牛客网上历史数据4万多条，但需要标注数据，不太想人工去标数据，这个计划暂时搁置，代码和历史数据已开源在<a href="https://github.com/chadqiu/newcoder-crawler">github  newcoder-crawler</a><br>**[更新]**：最后还是忍不住想玩一下，花了一周时间，训练了一个帖子分类模型进行过滤，详细构建过程见<a href="https://chadqiu.github.io/ed5507eb2665.html">如何从零开始构建一个网络讨论帖分类模型？</a>，模型地址:<a href="https://github.com/chadqiu/newcoder-crawler/blob/main/roberta4h512.zip">roberta4h512.zip</a>.<br>下载下来后解压，将roberta4h512文件夹放到与爬虫脚本同级目录下，模型推理的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_batch_generate</span>(<span class="params">texts, model, tokenizer, id2label = &#123;<span class="number">0</span>: <span class="string">&#x27;招聘信息&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;经验贴&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;求助贴&#x27;</span>&#125;, max_length = <span class="number">128</span></span>):</span><br><span class="line">    inputs = tokenizer( texts, return_tensors=<span class="string">&quot;pt&quot;</span>, max_length=<span class="number">128</span>, padding=<span class="literal">True</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">    outputs = model(**inputs).logits.argmax(-<span class="number">1</span>).tolist()</span><br><span class="line">    <span class="keyword">return</span> [id2label[x] <span class="keyword">for</span> x <span class="keyword">in</span> outputs]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_predict</span>(<span class="params">text_list, model = <span class="literal">None</span>, tokenizer = <span class="literal">None</span>, model_name = <span class="string">&quot;roberta4h512&quot;</span>, batch_size = <span class="number">4</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text_list: <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> model:</span><br><span class="line">        model = AutoModelForSequenceClassification.from_pretrained(model_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tokenizer:</span><br><span class="line">        tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    result, start = [], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(start &lt; <span class="built_in">len</span>(text_list)):</span><br><span class="line">        result.extend(_batch_generate(text_list[start : start + batch_size], model, tokenizer))</span><br><span class="line">        start += batch_size</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，稍微改一下run函数，加入模型过滤的逻辑即可，另外还有一些人会把一个信息重复发布多份，这里加入一个根据内容进行去重的逻辑，修改后的run函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def filter(data, unique_content, model = None, tokenizer = None):</span><br><span class="line">    # 模型过滤，根据页面内容去重</span><br><span class="line">    labels = model_predict([(str(x[&#x27;title&#x27;]) if x[&#x27;title&#x27;] else &quot;&quot; ) + &quot;\t&quot; +</span><br><span class="line">                            (str(x[&#x27;content&#x27;]) if x[&#x27;content&#x27;] else &quot;&quot; ) for x in data], model, tokenizer)</span><br><span class="line">    result = []</span><br><span class="line">    for i, x in enumerate(data):</span><br><span class="line">        if x[&#x27;content&#x27;] in unique_content or labels[i] != &quot;招聘信息&quot;: </span><br><span class="line">            continue</span><br><span class="line">        unique_content.add(x[&#x27;content&#x27;])</span><br><span class="line">        result.append(x)</span><br><span class="line">    return result</span><br><span class="line">    </span><br><span class="line">def run(keywords, skip_words, db_config, mail_config = None):</span><br><span class="line">    res = []</span><br><span class="line">    for key in keywords:</span><br><span class="line">        print(key, time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;))</span><br><span class="line">        for i in range(1, 21):</span><br><span class="line">            print(i)</span><br><span class="line">            page = get_newcoder_page(i, key, skip_words, </span><br><span class="line">                                    start_date = time.strftime(&quot;%Y-%m-%d&quot;, time.localtime(time.time() - 15 * 24 * 60 * 60)))</span><br><span class="line">            if not page: </span><br><span class="line">                break</span><br><span class="line">            res.extend(page)</span><br><span class="line">            time.sleep(1)</span><br><span class="line">            </span><br><span class="line">    res.sort(key = lambda x: len(x[&#x27;content&#x27;]))</span><br><span class="line">    result, ids = [], set()  # 根据id去重</span><br><span class="line">    for x in res:</span><br><span class="line">        if x[&#x27;id&#x27;] in ids: </span><br><span class="line">            continue</span><br><span class="line">        ids.add(x[&#x27;id&#x27;])</span><br><span class="line">        result.append(x)</span><br><span class="line">        </span><br><span class="line">    print(&quot;total num: &quot;, len(result))</span><br><span class="line">    #print(result)</span><br><span class="line">    insert_data, update_data = upsert_to_db(result, **db_config)  </span><br><span class="line">    </span><br><span class="line">    if mail_config:</span><br><span class="line">        unique_content, shared_model, shared_tokenizer = set(), None, None</span><br><span class="line">        insert_data = filter(insert_data, unique_content, shared_model, shared_tokenizer)</span><br><span class="line">        update_data = filter(update_data, unique_content, shared_model, shared_tokenizer)</span><br><span class="line">        send_email(insert_data, update_data, **mail_config)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写shell脚本，使用crontab自动运行"><a href="#编写shell脚本，使用crontab自动运行" class="headerlink" title="编写shell脚本，使用crontab自动运行"></a>编写shell脚本，使用crontab自动运行</h2><p>代码希望每天运行一次， 如果每次都手动运行的话，使用体验就很不好了，最好是放在服务器中，弄个croontab定时任务，每天自动运行一次。把启动的命令写成shell脚本如下：<br>shell脚本newcoder.sh内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source /root/anaconda3/bin/activate base</span><br><span class="line">cd /root/chadqiu/crawler</span><br><span class="line">python newcoder.py &gt; server.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="crontab配置"><a href="#crontab配置" class="headerlink" title="crontab配置"></a>crontab配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -l  # 查看已经存在的定时任务</span><br><span class="line">crontab -e  #编辑/新加定时任务</span><br><span class="line">service crond restart  #重启，是刚才的配置更改生效</span><br></pre></td></tr></table></figure><p>这里crontab -e新加配置内容如下，每天18：30运行一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 18 * * * bash /root/chadqiu/crawler/newcoder.sh</span><br></pre></td></tr></table></figure><p><strong>cron配置语法规则</strong>：<br>5个位置含义如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Minute Hour Day  Month    Dayofweek   command</span><br><span class="line">分钟     小时   天     月       天每星期       命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">“*”代表取值范围内的数字,</span><br><span class="line">“/”代表”每”,</span><br><span class="line">“-”代表从某个数字到某个数字,</span><br><span class="line">“,”分开几个离散的数字</span><br></pre></td></tr></table></figure><h2 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h2><p>刚才的<code>main</code>函数里有很多配置需要写，特别是过滤词、接收邮箱列表等可能会经常改变，每改一次就得重新改代码非常麻烦，因此引入了Nacos注册中心，将<code>keywords, skip_words, db_config, mail_config</code>这四个配置变量放在Nacos中，这样就可以动态修改了，在Nacos中配置为json格式，如下图所示<br><img src="/images/nacos_params.png" alt="Nacos添加的参数截图"><br><img src="/images/nacos_newcoder_keyword.png" alt="Nacos关键词配置截图"><br><img src="/images/nacos_mail_config.png" alt="Nacos邮箱配置截图"></p><p>代码稍作修改，加入一个<code>get_config</code>函数，并修改一下<code>main</code>函数，修改的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nacos</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_config</span>(<span class="params">SERVER_ADDRESSES, NAMESPACE, GROUP</span>):</span><br><span class="line">    <span class="built_in">print</span>(SERVER_ADDRESSES, NAMESPACE)</span><br><span class="line">    client = nacos.NacosClient(SERVER_ADDRESSES, namespace=NAMESPACE)</span><br><span class="line"></span><br><span class="line">    keywords = json.loads(client.get_config(<span class="string">&quot;newcoder.crawler.keywords&quot;</span>, GROUP))</span><br><span class="line">    skip_words = json.loads(client.get_config(<span class="string">&quot;newcoder.crawler.skip_words&quot;</span>, GROUP))</span><br><span class="line">    db_config = json.loads(client.get_config(<span class="string">&quot;newcoder.crawler.db_config&quot;</span>, GROUP))</span><br><span class="line">    mail_config= json.loads(client.get_config(<span class="string">&quot;newcoder.crawler.mail_config&quot;</span>, GROUP))</span><br><span class="line">    <span class="keyword">return</span> keywords, skip_words, db_config, mail_config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    SERVER_ADDRESSES = <span class="string">&quot;ip:port&quot;</span></span><br><span class="line">    NAMESPACE = <span class="string">&quot;your namespace&quot;</span></span><br><span class="line">    GROUP= <span class="string">&quot;your group&quot;</span></span><br><span class="line">    </span><br><span class="line">    run(*get_config(SERVER_ADDRESSES, NAMESPACE, GROUP))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><p>将上面两份代码整合后的完整代码见 <a href="https://github.com/chadqiu/newcoder-crawler/blob/main/crawler_advanced.py">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;爬取牛客网的帖子，获取一些感兴趣的信息，比如职位内推等。&lt;br&gt;为获得每日最新数据，系统使用增量更新，老数据保存到mysql数据库中用于去重，使用NLP分类模型进行内容筛选，过滤掉无关内容，每日新增的数据发邮件提醒，使用crontab定时任务每天自动运行，邮件效果如下图所示</summary>
      
    
    
    
    <category term="tools - 爬虫" scheme="http://chadqiu.github.io/categories/tools-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="爬虫" scheme="http://chadqiu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="牛客网" scheme="http://chadqiu.github.io/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://chadqiu.github.io/395c25595e33.html"/>
    <id>http://chadqiu.github.io/395c25595e33.html</id>
    <published>2023-01-27T05:38:36.000Z</published>
    <updated>2024-11-26T16:26:22.004Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫可以模拟浏览器向网站发起请求，获取网站数据，代替人做一些重复性劳动。</p><p>常见的网站可分为： 前后端分离架构 和 前后端不分离架构。对于前后端分离架构，只要发送request，返回的数据一般是json格式，很好处理；对于前后端不分离的网站，只能获取其html页面，然后使用BeautifulSoup从中提取想要的内容。</p><p>有些网站有反爬机制，需要做一些额外配置，最常见的是加一个’User-Agent’，有些需要cookie等其他header信息。具体信息可使用浏览器的开发者工具查看，chrome浏览器的快捷键为 “ctrl + shift + i”，然后点击network, 重新发送请求，即可看到请求的具体参数，也可用postman测试需要哪些参数。</p><p>一个简单的request请求结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 requests 包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">x = requests.get(<span class="string">&#x27;https://www.sogou.com/web?query=上海&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h2><h3 id="搜狗网页提取"><a href="#搜狗网页提取" class="headerlink" title="搜狗网页提取"></a>搜狗网页提取</h3><p>将搜索“上海”的结果页面保存到 “上海.html” 文件，设置了 “user-agent”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">x = requests.get(<span class="string">&#x27;https://www.sogou.com/web&#x27;</span>, params = param, headers = header)</span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;上海.html&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(x.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用百度翻译"><a href="#调用百度翻译" class="headerlink" title="调用百度翻译"></a>调用百度翻译</h3><p>百度翻译采用了前后端分离架构，返回的结果是json，非常便于处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;kw&quot;</span>: <span class="string">&quot;crawler&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">x = requests.post(<span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span>, data = data, headers = header)</span><br><span class="line"><span class="built_in">print</span>(x.json())</span><br></pre></td></tr></table></figure><h3 id="豆瓣电影"><a href="#豆瓣电影" class="headerlink" title="豆瓣电影"></a>豆瓣电影</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;40&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">x = requests.get(<span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span>, params = param, headers = header)</span><br><span class="line"><span class="built_in">print</span>(x.json())</span><br></pre></td></tr></table></figure><h3 id="谷歌学术"><a href="#谷歌学术" class="headerlink" title="谷歌学术"></a>谷歌学术</h3><p>需要科学上网</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.error</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;Chrome/90.0.4430.93 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&amp;as_ylo=2018&amp;q=zero-shot+NER&#x27;</span></span><br><span class="line">req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">res = urllib.request.urlopen(req, timeout=<span class="number">7</span>)</span><br><span class="line">html=res.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;爬虫可以模拟浏览器向网站发起请求，获取网站数据，代替人做一些重复性劳动。&lt;/p&gt;
&lt;p&gt;常见的网站可分为： 前后端分离架构 和 前后端不分离架构。对于前后端分离架构，只要发送request，返回的数据一般是json格式，很好处理；对于前后端不分离的网站，只能获取其html页</summary>
      
    
    
    
    <category term="tools - 爬虫" scheme="http://chadqiu.github.io/categories/tools-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://chadqiu.github.io/tags/python/"/>
    
    <category term="爬虫" scheme="http://chadqiu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用操作命令</title>
    <link href="http://chadqiu.github.io/62a45a82a2f9.html"/>
    <id>http://chadqiu.github.io/62a45a82a2f9.html</id>
    <published>2023-01-27T04:38:36.000Z</published>
    <updated>2024-11-26T17:01:04.027Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
